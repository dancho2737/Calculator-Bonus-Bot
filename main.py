# -*- coding: utf-8 -*-
import os
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, ConversationHandler
)

LANG, PASSWORD, BONUS, AMOUNT = range(4)

PASSWORD_CORRECT = "starzbot"

messages = {
    'ru': {
        'choose_lang': "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select language / Dil se√ßin:\n1. –†—É—Å—Å–∫–∏–π\n2. English\n3. T√ºrk√ße",
        'ask_password': "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
        'wrong_password': "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        'password_ok': "–ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –±–æ–Ω—É—Å:\n1. –ë–∞–π –±–æ–Ω—É—Å 20%\n2. –ö—Ä–∏–ø—Ç–æ –±–æ–Ω—É—Å 20%\n3. –î–µ–ø–æ–∑–∏—Ç–Ω—ã–π –±–æ–Ω—É—Å 10%",
        'choose_bonus': "–í—ã–±–µ—Ä–∏—Ç–µ –±–æ–Ω—É—Å:\n1. –ë–∞–π –±–æ–Ω—É—Å 20%\n2. –ö—Ä–∏–ø—Ç–æ –±–æ–Ω—É—Å 20%\n3. –î–µ–ø–æ–∑–∏—Ç–Ω—ã–π –±–æ–Ω—É—Å 10%",
        'ask_amount': "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):",
        'results': """–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –æ—Ç—ã–≥—Ä—ã—à–∞ —Å –≤–∞—à–µ–π —Å—É–º–º–æ–π –±–æ–Ω—É—Å–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—ä—ë–º—ã —Å—Ç–∞–≤–æ–∫ –≤ —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä–∞—Ö:

üîπ –°–ª–æ—Ç—ã (100%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {slots} —Å–æ–º–æ–≤

üîπ Roulette (30%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {roulette} —Å–æ–º–æ–≤

üîπ Blackjack (20%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {blackjack} —Å–æ–º–æ–≤

üîπ –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ, crash –∏–≥—Ä—ã –∏ –ª–∞–π–≤-–∫–∞–∑–∏–Ω–æ –∏–≥—Ä—ã (10%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {crash} —Å–æ–º–æ–≤
""",
        'check_sums_reminder': "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–≤–æ–∏ –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã! –≠—Ç–æ –¥–ª—è –≤–∞—à–µ–π –∂–µ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏.",
        'stopspam_enabled': "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–æ.",
        'stopspam_disabled': "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –≤–∫–ª—é—á–µ–Ω–æ.",
        'stopspam_prompt': "–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stopspam",
    },
    'en': {
        'choose_lang': "Choose language / Dil se√ßin:\n1. Russian\n2. English\n3. Turkish",
        'ask_password': "Enter password:",
        'wrong_password': "Wrong password, try again.",
        'password_ok': "Password accepted. Choose a bonus:\n1. Buy Bonus 20%\n2. Crypto Bonus 20%\n3. Deposit Bonus 10%",
        'choose_bonus': "Choose a bonus:\n1. Buy Bonus 20%\n2. Crypto Bonus 20%\n3. Deposit Bonus 10%",
        'ask_amount': "Enter amount (or multiple numbers separated by space):",
        'results': """To meet the wagering requirements with your bonus amount, you will need to make the following bet volumes in different games:

üîπ Slots (100%) ‚Äî wager {slots}

üîπ Roulette (30%) ‚Äî wager {roulette}

üîπ Blackjack (20%) ‚Äî wager {blackjack}

üîπ Other table, crash and live casino games (10%) ‚Äî wager {crash}
""",
        'check_sums_reminder': "Please double-check your final sums! This is for your own protection.",
        'stopspam_enabled': "Reminder message disabled.",
        'stopspam_disabled': "Reminder message enabled.",
        'stopspam_prompt': "Use /stopspam to toggle reminders on/off",
    },
    'tr': {
        'choose_lang': "Dil se√ßin / Choose language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:\n1. Rus√ßa\n2. ƒ∞ngilizce\n3. T√ºrk√ße",
        'ask_password': "≈ûifreyi girin:",
        'wrong_password': "Yanlƒ±≈ü ≈üifre, tekrar deneyin.",
        'password_ok': "≈ûifre kabul edildi. Bonus se√ßin:\n1. Bay Bonus %20\n2. Kripto Bonus %20\n3. Depozito Bonusu %10",
        'choose_bonus': "Bonus se√ßin:\n1. Bay Bonus %20\n2. Kripto Bonus %20\n3. Depozito Bonusu %10",
        'ask_amount': "Tutar girin (veya bo≈ülukla ayrƒ±lmƒ±≈ü birden fazla sayƒ±):",
        'results': """Bonus tutarƒ±nƒ±zla √ßevrim ≈üartlarƒ±nƒ± yerine getirmek i√ßin farklƒ± oyunlarda a≈üaƒüƒ±daki bahis hacimlerini yapmanƒ±z gerekmektedir:

üîπ Slotlar (100%) ‚Äî oynanacak {slots}

üîπ Rulet (30%) ‚Äî oynanacak {roulette}

üîπ Blackjack (20%) ‚Äî oynanacak {blackjack}

üîπ Diƒüer masa oyunlarƒ±, crash ve canlƒ± casino oyunlarƒ± (10%) ‚Äî oynanacak {crash}
""",
        'check_sums_reminder': "L√ºtfen son tutarlarƒ± mutlaka kontrol edin! Bu sizin g√ºvenliƒüiniz i√ßin.",
        'stopspam_enabled': "Hatƒ±rlatma mesajƒ± kapatƒ±ldƒ±.",
        'stopspam_disabled': "Hatƒ±rlatma mesajƒ± a√ßƒ±ldƒ±.",
        'stopspam_prompt': "Hatƒ±rlatmalarƒ± a√ßƒ±p kapatmak i√ßin /stopspam komutunu kullanƒ±n",
    }
}

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—è–∑—ã–∫, –±–æ–Ω—É—Å, —Å—Ç–æ–ø—Å–ø–∞–º, —Å—á–µ—Ç—á–∏–∫)
user_data_store = {}

def get_user_data(user_id):
    if user_id not in user_data_store:
        user_data_store[user_id] = {
            'lang': 'ru',
            'bonus': None,
            'stopspam': False,
            'count': 0,
            'password_ok': False
        }
    return user_data_store[user_id]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = get_user_data(user_id)
    data['password_ok'] = False
    await update.message.reply_text(messages['ru']['choose_lang'])
    return LANG

async def lang_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id
    data = get_user_data(user_id)
    lang_map = {'1': 'ru', '2': 'en', '3': 'tr'}
    if text in lang_map:
        data['lang'] = lang_map[text]
        await update.message.reply_text(messages[data['lang']]['ask_password'])
        return PASSWORD
    else:
        await update.message.reply_text(messages[data['lang']]['choose_lang'])
        return LANG

async def password_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = get_user_data(user_id)
    if update.message.text.strip() == PASSWORD_CORRECT:
        data['password_ok'] = True
        await update.message.reply_text(messages[data['lang']]['password_ok'])
        await update.message.reply_text(messages[data['lang']]['choose_bonus'])
        return BONUS
    else:
        await update.message.reply_text(messages[data['lang']]['wrong_password'])
        return PASSWORD

async def bonus_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id
    data = get_user_data(user_id)
    if text == '1':
        data['bonus'] = 'buy_crypto'  # 20%
    elif text == '2':
        data['bonus'] = 'buy_crypto'  # 20%
    elif text == '3':
        data['bonus'] = 'deposit'     # 10%
    else:
        await update.message.reply_text(messages[data['lang']]['choose_bonus'])
        return BONUS
    await update.message.reply_text(messages[data['lang']]['ask_amount'])
    return AMOUNT

def calculate_amounts(bonus_type, nums):
    results = []
    for num in nums:
        if bonus_type == 'deposit':
            sums2 = num * 0.10
            sums3 = sums2 * 15
        else:  # buy_crypto
            sums2 = num * 0.20
            sums3 = sums2 * 15
        slots = sums3 + num
        roulette = sums3 * 3.33 + num
        blackjack = sums3 * 5 + num
        crash = sums3 * 10 + num
        results.append({
            'slots': int(slots),
            'roulette': int(roulette),
            'blackjack': int(blackjack),
            'crash': int(crash),
            'original': num
        })
    return results

def format_number(n):
    return f"{n:,}".replace(",", " ")

async def amount_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = get_user_data(user_id)
    if not data['password_ok']:
        await update.message.reply_text(messages[data['lang']]['ask_password'])
        return PASSWORD
    text = update.message.text.strip()
    try:
        nums = list(map(int, text.split()))
    except ValueError:
        await update.message.reply_text(messages[data['lang']]['ask_amount'])
        return AMOUNT
    results = calculate_amounts(data['bonus'], nums)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    lines = []
    for res in results:
        lines.append(messages[data['lang']]['results'].format(
            slots=format_number(res['slots']),
            roulette=format_number(res['roulette']),
            blackjack=format_number(res['blackjack']),
            crash=format_number(res['crash'])
        ))
    message = "\n".join(lines)
    await update.message.reply_text(message)

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    if not data['stopspam']:
        data['count'] += 1
        # –ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–¥—Å—á—ë—Ç–∞ + –∫–∞–∂–¥—ã–µ 7 –ø–æ–¥—Å—á—ë—Ç–æ–≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        await update.message.reply_text(messages[data['lang']]['check_sums_reminder'])

    return BONUS

async def stopspam_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = get_user_data(user_id)
    data['stopspam'] = not data['stopspam']
    if data['stopspam']:
        await update.message.reply_text(messages[data['lang']]['stopspam_enabled'])
    else:
        await update.message.reply_text(messages[data['lang']]['stopspam_disabled'])

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = get_user_data(user_id)
    await update.message.reply_text(messages[data['lang']]['stopspam_prompt'])

def main():
    TOKEN = os.getenv("TELEGRAM_TOKEN")  # –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            LANG: [MessageHandler(filters.TEXT & ~filters.COMMAND, lang_choice)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, password_handler)],
            BONUS: [MessageHandler(filters.TEXT & ~filters.COMMAND, bonus_choice)],
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, amount_handler)],
        },
        fallbacks=[CommandHandler('stopspam', stopspam_command)]
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler('stopspam', stopspam_command))
    app.add_handler(MessageHandler(filters.COMMAND, unknown_command))

    print("Bot started")
    app.run_polling()

if __name__ == '__main__':
    main()
        
