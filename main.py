from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup, 
    ReplyKeyboardMarkup, 
    ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters, 
    ContextTypes, CallbackQueryHandler, ConversationHandler
)
import os
import math

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
LANGUAGE, PASSWORD, BONUS_CHOICE, AMOUNT = range(4)

PASSWORD_SECRET = "starzbot"

user_language = {}
user_authenticated = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ (ReplyKeyboard)
language_keyboard = ReplyKeyboardMarkup(
    [['–†—É—Å—Å–∫–∏–π', 'English', 'T√ºrk√ße']],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –ö–Ω–æ–ø–∫–∏ –±–æ–Ω—É—Å–æ–≤ (InlineKeyboard) —Å callback_data
bonus_buttons = {
    'ru': [
        [InlineKeyboardButton("–ö—Ä–∏–ø—Ç–æ/–ë–∞–π –ë–æ–Ω—É—Å 20%", callback_data="bonus_20")],
        [InlineKeyboardButton("–î–µ–ø–æ–∑–∏—Ç–Ω—ã–π –ë–æ–Ω—É—Å 10%", callback_data="bonus_10")]
    ],
    'en': [
        [InlineKeyboardButton("Crypto/Buy Bonus 20%", callback_data="bonus_20")],
        [InlineKeyboardButton("Deposit Bonus 10%", callback_data="bonus_10")]
    ],
    'tr': [
        [InlineKeyboardButton("Kripto/Bay Bonus 20%", callback_data="bonus_20")],
        [InlineKeyboardButton("Depozito Bonus 10%", callback_data="bonus_10")]
    ]
}

def format_number(n):
    n_ceil = math.ceil(n)
    return f"{n_ceil:,}".replace(",", " ")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_language[user_id] = 'ru'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
    user_authenticated[user_id] = False
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Please choose a language / L√ºtfen bir dil se√ßin:",
        reply_markup=language_keyboard
    )
    return LANGUAGE

async def language_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.lower()
    lang = None
    if text in ['—Ä—É—Å—Å–∫–∏–π', 'ru', 'russian']:
        lang = 'ru'
    elif text in ['english', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π', 'en']:
        lang = 'en'
    elif text in ['t√ºrk√ße', 'turkish', 'tr']:
        lang = 'tr'
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.", reply_markup=language_keyboard)
        return LANGUAGE
    
    user_language[user_id] = lang
    await update.message.reply_text(
        {
            'ru': "–Ø–∑—ã–∫ –≤—ã–±—Ä–∞–Ω: –†—É—Å—Å–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
            'en': "Language set to English. Please enter password:",
            'tr': "Dil T√ºrk√ße olarak se√ßildi. L√ºtfen ≈üifreyi girin:"
        }[lang],
        reply_markup=ReplyKeyboardRemove()
    )
    return PASSWORD

async def password_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = user_language.get(user_id, 'ru')
    text = update.message.text.strip()
    if text == PASSWORD_SECRET:
        user_authenticated[user_id] = True
        await update.message.reply_text(
            {
                'ru': "–ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –±–æ–Ω—É—Å:",
                'en': "Password accepted! Choose your bonus:",
                'tr': "≈ûifre kabul edildi! Bonus se√ßin:"
            }[lang],
            reply_markup=InlineKeyboardMarkup(bonus_buttons[lang])
        )
        return BONUS_CHOICE
    else:
        await update.message.reply_text(
            {
                'ru': "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                'en': "Wrong password. Try again:",
                'tr': "Yanlƒ±≈ü ≈üifre. Tekrar deneyin:"
            }[lang]
        )
        return PASSWORD

async def bonus_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    lang = user_language.get(user_id, 'ru')

    bonus_type = query.data  # bonus_20 –∏–ª–∏ bonus_10
    context.user_data['bonus_type'] = bonus_type

    await query.edit_message_text(
        {
            'ru': "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–Ω—É—Å–∞ (–≤ —Å–æ–º–∞—Ö):",
            'en': "Enter the bonus amount (in soms):",
            'tr': "Bonus tutarƒ±nƒ± girin (som cinsinden):"
        }[lang]
    )
    return AMOUNT

async def amount_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = user_language.get(user_id, 'ru')
    bonus_type = context.user_data.get('bonus_type')
    
    try:
        amount = float(update.message.text.strip().replace(',', '.'))
        if amount <= 0:
            raise ValueError
    except ValueError:
        await update.message.reply_text(
            {
                'ru': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.",
                'en': "Please enter a valid positive number.",
                'tr': "L√ºtfen ge√ßerli pozitif bir sayƒ± girin."
            }[lang]
        )
        return AMOUNT

    # –†–∞—Å—á–µ—Ç
    if bonus_type == "bonus_20":
        bonus_percent = 0.20
        multiplier = 20
    elif bonus_type == "bonus_10":
        bonus_percent = 0.10
        multiplier = 15
    else:
        bonus_percent = 0
        multiplier = 0

    bonus_amount = amount * bonus_percent
    wager = bonus_amount * multiplier
    slots = amount + wager
    roulette = amount + wager * 0.3
    blackjack = amount + wager * 0.2
    others = amount + wager * 0.1

    response = {
        'ru': (
            f"–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –æ—Ç—ã–≥—Ä—ã—à–∞ —Å –≤–∞—à–∏–º –±–æ–Ω—É—Å–æ–º {format_number(amount)} —Å–æ–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏:\n\n"
            f"üîπ –°–ª–æ—Ç—ã (100%) ‚Äî {format_number(slots)} —Å–æ–º\n"
            f"üîπ –†—É–ª–µ—Ç–∫–∞ (30%) ‚Äî {format_number(roulette)} —Å–æ–º\n"
            f"üîπ –ë–ª—ç–∫–¥–∂–µ–∫ (20%) ‚Äî {format_number(blackjack)} —Å–æ–º\n"
            f"üîπ –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã, crash –∏ –ª–∞–π–≤-–∫–∞–∑–∏–Ω–æ (10%) ‚Äî {format_number(others)} —Å–æ–º"
        ),
        'en': (
            f"To meet wagering requirements for your bonus amount {format_number(amount)} soms, you need to wager:\n\n"
            f"üîπ Slots (100%) ‚Äî {format_number(slots)} soms\n"
            f"üîπ Roulette (30%) ‚Äî {format_number(roulette)} soms\n"
            f"üîπ Blackjack (20%) ‚Äî {format_number(blackjack)} soms\n"
            f"üîπ Other table, crash and live casino games (10%) ‚Äî {format_number(others)} soms"
        ),
        'tr': (
            f"Bonus tutarƒ±nƒ±z {format_number(amount)} som i√ßin √ßevrim ≈üartlarƒ±nƒ± kar≈üƒ±lamak amacƒ±yla bahis yapmanƒ±z gereken tutarlar:\n\n"
            f"üîπ Slotlar (100%) ‚Äî {format_number(slots)} som\n"
            f"üîπ Rulet (30%) ‚Äî {format_number(roulette)} som\n"
            f"üîπ Blackjack (20%) ‚Äî {format_number(blackjack)} som\n"
            f"üîπ Diƒüer masa oyunlarƒ±, crash oyunlarƒ± ve canlƒ± casino (10%) ‚Äî {format_number(others)} som"
        )
    }

    await update.message.reply_text(response[lang])
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = user_language.get(user_id, 'ru')
    await update.message.reply_text(
        {
            'ru': "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            'en': "Operation cancelled.",
            'tr': "ƒ∞≈ülem iptal edildi."
        }[lang],
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

if __name__ == "__main__":
    TOKEN = os.getenv("TOKEN")
    if not TOKEN:
        print("–û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN")
        exit(1)

    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, language_chosen)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, password_entered)],
            BONUS_CHOICE: [CallbackQueryHandler(bonus_chosen)],
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, amount_entered)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True
    )

    app.add_handler(conv_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
