import logging
import sqlite3
import json
import os
import random

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters, ConversationHandler
)

import openai

# === CONFIG ===
BOT_TOKEN = os.environ["BOT_TOKEN"]
API_KEY = os.environ["OPENAI_KEY"]
openai.api_key = API_KEY

DB_FILE = "data.db"
SCENARIO_FILE = "scenarios.json"
RULES_FOLDER = "rules"
PASSWORD = "starzbot"

# === STATES ===
(
    PASSWORD_CHECK,
    REGISTRATION,
    LOGIN,
    AWAITING_ANSWER,
    AWAITING_FOLLOWUP_ANSWER,
) = range(5)

# === LOGGER ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === DATABASE INIT ===
def init_db():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            login TEXT,
            password TEXT
        )
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS logs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            question TEXT,
            answer TEXT,
            evaluation TEXT,
            grammar_issues TEXT,
            correct_answer TEXT
        )
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS error_reports (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            question TEXT,
            answer TEXT,
            evaluation TEXT
        )
    ''')
    conn.commit()
    conn.close()

# === GLOBAL MEMORY ===
session = {}

# === LOAD SCENARIOS AND RULES ===
def load_scenarios():
    with open(SCENARIO_FILE, encoding='utf-8') as f:
        data = json.load(f)
    random.shuffle(data)
    return data

def load_rules():
    rules = {}
    for filename in os.listdir(RULES_FOLDER):
        if filename.endswith(".txt"):
            category = filename.replace(".txt", "")
            path = os.path.join(RULES_FOLDER, filename)
            with open(path, encoding='utf-8') as f:
                rules[category] = f.read()
    return rules

RULES_BY_CATEGORY = load_rules()

# === AI EVALUATION ===
def evaluate_answer(question, expected_skill, category, answer):
    rules_text = RULES_BY_CATEGORY.get(category, "")[:3000]
    prompt = f"""
–í–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {question}
–ù–∞–≤—ã–∫: {expected_skill}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}
–û—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {answer}

–ü—Ä–∞–≤–∏–ª–∞:
{rules_text}

–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
  "evaluation": "correct|partial|incorrect",
  "reason": "...",
  "grammar_issues": "...",
  "correct_answer": "...",
  "follow_up_question": "..."
}}
–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ—á—Ç–∏ –≤–µ—Ä–Ω—ã–π, –Ω–æ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ, –æ—Ü–µ–Ω–∏–≤–∞–π –∫–∞–∫ "correct".
–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ –≤–µ—Ä–Ω—ã–π ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ª—É—á—à–µ –æ—Ç–≤–µ—Ç–∏—Ç—å.
"""
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}]
        )
        content = response["choices"][0]["message"]["content"].strip()
        logger.info(f"OpenAI raw response: {content}")
        result = json.loads(content)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        result = {"evaluation": "incorrect", "reason": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ò–ò", "grammar_issues": "", "correct_answer": "", "follow_up_question": ""}
    return result

# === HANDLERS ===

async def start_training(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in session or not session[user_id].get("authenticated"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /auth.")
        return

    session[user_id]["score"] = {"correct": 0, "partial": 0, "incorrect": 0}
    session[user_id]["step"] = 0
    session[user_id]["scenario"] = load_scenarios()
    session[user_id]["followup_mode"] = False
    session[user_id]["followup_tries"] = 0

    await ask_question(update, context)
    return AWAITING_ANSWER

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    index = session[user_id]["step"]
    scenario = session[user_id]["scenario"]

    if index >= len(scenario):
        await update.message.reply_text("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ /stop –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return ConversationHandler.END

    entry = scenario[index]
    session[user_id]["current"] = entry
    session[user_id]["followup_mode"] = False
    session[user_id]["followup_tries"] = 0
    await update.message.reply_text(f"–í–æ–ø—Ä–æ—Å: {entry['question']}")

async def process_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    answer = update.message.text.strip()

    if user_id not in session or "current" not in session[user_id]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    entry = session[user_id]["current"]
    followup_mode = session[user_id].get("followup_mode", False)
    followup_tries = session[user_id].get("followup_tries", 0)

    # –û—Ü–µ–Ω–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    result = evaluate_answer(entry["question"], entry["expected_skill"], entry["category"], answer)
    evaluation = result.get("evaluation", "incorrect")
    reason = result.get("reason", "")
    grammar = result.get("grammar_issues", "")
    correct_answer = result.get("correct_answer", "")
    follow_up_question = result.get("follow_up_question", "")

    session[user_id]["last"] = {
        "question": entry["question"],
        "answer": answer,
        "evaluation": evaluation,
        "correct_answer": correct_answer
    }

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("""
        INSERT INTO logs (user_id, question, answer, evaluation, grammar_issues, correct_answer)
        VALUES (?, ?, ?, ?, ?, ?)
    """, (user_id, entry["question"], answer, evaluation, grammar, correct_answer))
    conn.commit()
    conn.close()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫
    session[user_id]["score"][evaluation] += 1

    if evaluation == "correct":
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –≤–µ—Ä–Ω—ã–π!")
        session[user_id]["step"] += 1
        session[user_id]["followup_mode"] = False
        session[user_id]["followup_tries"] = 0
        await ask_question(update, context)
    else:
        # –ï—Å–ª–∏ –º—ã —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ —É—Ç–æ—á–Ω–µ–Ω–∏–π ‚Äî —Å—á–∏—Ç–∞–µ–º –ø–æ–ø—ã—Ç–∫—É
        if followup_mode:
            session[user_id]["followup_tries"] += 1
            if session[user_id]["followup_tries"] >= 3:
                await update.message.reply_text(f"‚ùå –í—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{correct_answer}")
                session[user_id]["step"] += 1
                session[user_id]["followup_mode"] = False
                session[user_id]["followup_tries"] = 0
                await ask_question(update, context)
            else:
                await update.message.reply_text(f"‚ùå –û—Ç–≤–µ—Ç –≤—Å—ë –µ—â—ë –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω–∞—á–µ.\n–£—Ç–æ—á–Ω–µ–Ω–∏–µ: {follow_up_question}")
        else:
            # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —É—Ç–æ—á–Ω–µ–Ω–∏–π
            session[user_id]["followup_mode"] = True
            session[user_id]["followup_tries"] = 1
            await update.message.reply_text(f"üü° –û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ –≤–µ—Ä–Ω—ã–π.\n–£—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å: {follow_up_question}")

async def send_correct_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    last = session.get(user_id, {}).get("last")
    if not last:
        await update.message.reply_text("–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞.")
        return
    correct = last.get("correct_answer", "–ù–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.")
    await update.message.reply_text(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{correct}")

async def stop_training(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    score = session.get(user_id, {}).get("score", {})
    msg = (f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
           f"‚úÖ –í–µ—Ä–Ω—ã—Ö: {score.get('correct', 0)}\n"
           f"üü° –ß–∞—Å—Ç–∏—á–Ω–æ –≤–µ—Ä–Ω—ã—Ö: {score.get('partial', 0)}\n"
           f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã—Ö: {score.get('incorrect', 0)}")
    await update.message.reply_text(msg)

async def report_error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    last = session.get(user_id, {}).get("last")
    if not last:
        await update.message.reply_text("–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∂–∞–ª–æ–±—ã.")
        return
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("INSERT INTO error_reports (user_id, question, answer, evaluation) VALUES (?, ?, ?, ?)",
              (user_id, last["question"], last["answer"], last["evaluation"]))
    conn.commit()
    conn.close()
    await update.message.reply_text("–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!")

# === MAIN ===
if __name__ == '__main__':
    init_db()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    from auth_handlers import conv_handler as auth_conv
    app.add_handler(auth_conv)

    app.add_handler(CommandHandler("start", start_training))
    app.add_handler(CommandHandler("stop", stop_training))
    app.add_handler(CommandHandler("answer", send_correct_answer))
    app.add_handler(CommandHandler("error", report_error))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_answer))

    app.run_polling()
