import logging
import sqlite3
import json
import os

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters, CallbackQueryHandler, ConversationHandler
)

import openai

# === CONFIG ===
BOT_TOKEN = os.environ["BOT_TOKEN"]
API_KEY = os.environ["OPENAI_KEY"]
openai.api_key = API_KEY

DB_FILE = "data.db"
SCENARIO_FILE = "scenarios.json"
RULES_FOLDER = "rules"
PASSWORD = "starzbot"

# === STATE ===
(
    PASSWORD_CHECK,
    REGISTRATION,
    LOGIN,
    AWAITING_ANSWER,
) = range(4)

# === LOGGER ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === DATABASE INIT ===
def init_db():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            login TEXT,
            password TEXT
        )
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS logs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            question TEXT,
            answer TEXT,
            evaluation TEXT,
            grammar_issues TEXT
        )
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS error_reports (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            question TEXT,
            answer TEXT,
            evaluation TEXT
        )
    ''')
    conn.commit()
    conn.close()

# === GLOBAL MEMORY ===
session = {}

# === LOAD SCENARIOS AND RULES ===
def load_scenarios():
    with open(SCENARIO_FILE, encoding='utf-8') as f:
        return json.load(f)

def load_rules():
    all_rules = []
    for filename in os.listdir(RULES_FOLDER):
        path = os.path.join(RULES_FOLDER, filename)
        if os.path.isfile(path):
            with open(path, encoding='utf-8') as f:
                all_rules.append(f.read())
    return "\n".join(all_rules)

RULE_TEXT = load_rules()

# === AI EVALUATION ===
def evaluate_answer(question, expected_skill, answer):
    prompt = f"""
–í–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {question}
–ù–∞–≤—ã–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è: {expected_skill}
–û—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {answer}

–û—Ü–µ–Ω–∏ –æ—Ç–≤–µ—Ç –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
1. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π
2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π, –Ω–æ –Ω–µ–ø–æ–ª–Ω—ã–π
3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

–¢–∞–∫–∂–µ —Å—Ä–∞–≤–Ω–∏ –æ—Ç–≤–µ—Ç —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:
{RULE_TEXT[:5000]}

–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{"evaluation": "correct|partial|incorrect", "reason": "...", "grammar_issues": "..."}}
"""
    response = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}]
    )
    try:
        result = json.loads(response["choices"][0]["message"]["content"].strip())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò: {e}")
        result = {"evaluation": "incorrect", "reason": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò", "grammar_issues": ""}
    return result

# === HANDLERS ===

# --- –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø /auth ---
async def auth_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in session and session[user_id].get("authenticated"):
        await update.message.reply_text("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
        return ConversationHandler.END
    session[user_id] = {"authenticated": False}
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:")
    return PASSWORD_CHECK

async def password_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    if text == PASSWORD:
        keyboard = [
            [InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data='register')],
            [InlineKeyboardButton("–í–æ–π—Ç–∏", callback_data='login')]
        ]
        await update.message.reply_text("–ü–∞—Ä–æ–ª—å –≤–µ—Ä–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                        reply_markup=InlineKeyboardMarkup(keyboard))
        return REGISTRATION
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return PASSWORD_CHECK

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    session[user_id]["action"] = query.data  # register –∏–ª–∏ login
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
    return LOGIN

async def login_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    state = session[user_id]

    if "login" not in state:
        state["login"] = text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        return LOGIN

    login, password = state["login"], text
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()

    if state["action"] == "register":
        c.execute("SELECT 1 FROM users WHERE login = ?", (login,))
        if c.fetchone():
            await update.message.reply_text("–¢–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
            conn.close()
            return LOGIN
        c.execute("INSERT INTO users (user_id, username, login, password) VALUES (?, ?, ?, ?)",
                  (user_id, update.effective_user.username, login, password))
        conn.commit()
        await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
    else:
        c.execute("SELECT * FROM users WHERE login = ? AND password = ?", (login, password))
        if not c.fetchone():
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            conn.close()
            return LOGIN
        await update.message.reply_text("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")

    session[user_id]["authenticated"] = True
    conn.close()
    return ConversationHandler.END

# --- –ù–ê–ß–ê–õ–û –¢–†–ï–ù–ò–†–û–í–ö–ò /start ---
async def start_training(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in session or not session[user_id].get("authenticated"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /auth.")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    session[user_id]["score"] = {"correct": 0, "partial": 0, "incorrect": 0}
    session[user_id]["step"] = 0
    session[user_id]["scenario"] = load_scenarios()

    await ask_question(update, context)
    return AWAITING_ANSWER

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    index = session[user_id]["step"]
    scenario = session[user_id]["scenario"]

    if index >= len(scenario):
        await update.message.reply_text("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ /stop –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return ConversationHandler.END

    question = scenario[index]["question"]
    await update.message.reply_text(f"–í–æ–ø—Ä–æ—Å: {question}")

# --- –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–û–í ---
async def process_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    scenario = session[user_id]["scenario"]
    index = session[user_id]["step"]
    entry = scenario[index]
    answer = update.message.text

    result = evaluate_answer(entry["question"], entry["expected_skill"], answer)
    evaluation = result.get("evaluation", "incorrect")
    grammar = result.get("grammar_issues", "")

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("INSERT INTO logs (user_id, question, answer, evaluation, grammar_issues) VALUES (?, ?, ?, ?, ?)",
              (user_id, entry["question"], answer, evaluation, grammar))
    conn.commit()
    conn.close()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ —Å–µ—Å—Å–∏–∏
    session[user_id]["score"].setdefault(evaluation, 0)
    session[user_id]["score"][evaluation] += 1

    session[user_id]["last"] = {"question": entry["question"], "answer": answer, "evaluation": evaluation}

    if evaluation == "correct":
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π!")
        session[user_id]["step"] += 1
        await ask_question(update, context)

    elif evaluation == "partial":
        await update.message.reply_text("üü° –û—Ç–≤–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ –≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å.")

    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏.")

# --- –ó–ê–í–ï–†–®–ï–ù–ò–ï –¢–†–ï–ù–ò–†–û–í–ö–ò /stop ---
async def stop_training(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    score = session.get(user_id, {}).get("score", {})
    msg = (f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
           f"‚úÖ –í–µ—Ä–Ω—ã—Ö: {score.get('correct', 0)}\n"
           f"üü° –ß–∞—Å—Ç–∏—á–Ω–æ –≤–µ—Ä–Ω—ã—Ö: {score.get('partial', 0)}\n"
           f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã—Ö: {score.get('incorrect', 0)}")
    await update.message.reply_text(msg)

# --- –ñ–ê–õ–û–ë–ê –ù–ê –û–¶–ï–ù–ö–£ /error ---
async def report_error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    last = session.get(user_id, {}).get("last")
    if not last:
        await update.message.reply_text("–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∂–∞–ª–æ–±—ã.")
        return
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("INSERT INTO error_reports (user_id, question, answer, evaluation) VALUES (?, ?, ?, ?)",
              (user_id, last["question"], last["answer"], last["evaluation"]))
    conn.commit()
    conn.close()
    await update.message.reply_text("–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!")

# === MAIN ===
if __name__ == '__main__':
    init_db()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # ConversationHandler –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    conv = ConversationHandler(
        entry_points=[CommandHandler("auth", auth_start)],
        states={
            PASSWORD_CHECK: [MessageHandler(filters.TEXT & ~filters.COMMAND, password_check)],
            REGISTRATION: [CallbackQueryHandler(button_handler)],
            LOGIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_handler)],
        },
        fallbacks=[]
    )

    app.add_handler(conv)

    # –û—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –∂–∞–ª–æ–±
    app.add_handler(CommandHandler("start", start_training))
    app.add_handler(CommandHandler("stop", stop_training))
    app.add_handler(CommandHandler("error", report_error))

    app.run_polling()
