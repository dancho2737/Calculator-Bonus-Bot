from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackContext
import os
import math

user_choice_data = {}
user_active_status = {}
user_spam_status = {}
user_count_calc = {}
user_authenticated = {}
user_language = {}

PASSWORD = "starzbot"

LANGUAGE_KEYBOARD = ReplyKeyboardMarkup(
    [["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá¨üáß English", "üáπüá∑ T√ºrk√ße"]],
    resize_keyboard=True
)

reply_keyboards = {
    "ru": [['–ö—Ä–∏–ø—Ç–æ/–ë–∞–π –±–æ–Ω—É—Å 20'], ['–î–µ–ø–æ–∑–∏—Ç –±–æ–Ω—É—Å 10']],
    "en": [['Crypto/Bai Bonus 20'], ['Deposit Bonus 10']],
    "tr": [['Kripto/Bai Bonusu 20'], ['Yatƒ±rƒ±m Bonusu 10']]
}

translations = {
    "choose_language": {
        "ru": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫:",
        "en": "Please choose your language:",
        "tr": "L√ºtfen dil se√ßiniz:"
    },
    "enter_password": {
        "ru": "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:",
        "en": "Enter the password to access the bot:",
        "tr": "Bota eri≈ümek i√ßin ≈üifreyi giriniz:"
    },
    "access_granted": {
        "ru": "–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω! –í—ã–±–µ—Ä–∏ –±–æ–Ω—É—Å –∏ –≤–≤–µ–¥–∏ —Å—É–º–º—É:",
        "en": "Access granted! Choose a bonus and enter the amount:",
        "tr": "Eri≈üim verildi! Bonusu se√ßin ve miktarƒ± girin:"
    },
    "wrong_password": {
        "ru": "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
        "en": "Wrong password. Please try again.",
        "tr": "Yanlƒ±≈ü ≈üifre. L√ºtfen tekrar deneyin."
    },
    "bot_activated": {
        "ru": "–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í—ã–±–µ—Ä–∏ –±–æ–Ω—É—Å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∏ –≤–≤–µ–¥–∏ —Å—É–º–º—É:",
        "en": "Bot activated. Choose a bonus to calculate and enter the amount:",
        "tr": "Bot aktif. Hesaplamak i√ßin bir bonus se√ßin ve miktarƒ± girin:"
    },
    "bot_stopped": {
        "ru": "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞, –Ω–∞–ø–∏—à–∏ /start.",
        "en": "Bot stopped. To restart, type /start.",
        "tr": "Bot durduruldu. Yeniden ba≈ülatmak i√ßin /start yazƒ±n."
    },
    "stopspam_confirm": {
        "ru": "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –±–æ–ª—å—à–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç, –∫—Ä–æ–º–µ –∫–∞–∂–¥—ã—Ö 10 –ø–æ–¥—Å—á—ë—Ç–æ–≤.",
        "en": "Warnings will no longer appear, except every 10 calculations.",
        "tr": "Uyarƒ±lar artƒ±k g√∂sterilmeyecek, yalnƒ±zca her 10 hesaplamada bir."
    },
    "choose_bonus": {
        "ru": "–í—ã–±—Ä–∞–Ω: {text}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—É–º–º—É.",
        "en": "Selected: {text}. Now enter the amount.",
        "tr": "Se√ßildi: {text}. ≈ûimdi miktarƒ± girin."
    },
    "invalid_number": {
        "ru": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ —á–∏—Å–ª–∞.",
        "en": "Please enter a valid number or numbers.",
        "tr": "L√ºtfen ge√ßerli bir sayƒ± veya sayƒ±lar girin."
    },
    "reminder": {
        "ru": "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã! –≠—Ç–æ –¥–ª—è –≤–∞—à–µ–π –∂–µ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏. –ï—Å–ª–∏ –∂–µ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–±—ã —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –ø–æ—è–≤–ª—è–ª–æ—Å—å, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ stopspam",
        "en": "Always double-check the final amounts! It's for your own safety. If you want to stop seeing this message, type stopspam",
        "tr": "Toplamlarƒ± her zaman tekrar kontrol edin! Bu sizin g√ºvenliƒüiniz i√ßin. Bu mesajƒ± artƒ±k g√∂rmek istemiyorsanƒ±z, stopspam yazƒ±n"
    },
    "reminder_short": {
        "ru": "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã! –≠—Ç–æ –¥–ª—è –≤–∞—à–µ–π –∂–µ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏.",
        "en": "Always double-check the final amounts! It's for your own safety.",
        "tr": "Toplamlarƒ± her zaman tekrar kontrol edin! Bu sizin g√ºvenliƒüiniz i√ßin."
    },
    "choose_bonus_first": {
        "ru": "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –±–æ–Ω—É—Å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.",
        "en": "Please choose a bonus using the button below.",
        "tr": "L√ºtfen a≈üaƒüƒ±daki d√ºƒümeyi kullanarak bir bonus se√ßin."
    },
    "wager_intro_singular": {
        "ru": "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –æ—Ç—ã–≥—Ä—ã—à–∞ —Å –≤–∞—à–µ–π —Å—É–º–º–æ–π –±–æ–Ω—É—Å–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—ä—ë–º—ã —Å—Ç–∞–≤–æ–∫ –≤ —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä–∞—Ö:",
        "en": "To meet the wagering conditions, you need to:",
        "tr": "√áevrim ≈üartlarƒ±nƒ± kar≈üƒ±lamak i√ßin ≈üunlarƒ± yapmalƒ±sƒ±nƒ±z:"
    },
    "wager_intro_plural": {
        "ru": "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –æ—Ç—ã–≥—Ä—ã—à–∞ —Å –≤–∞—à–∏–º–∏ —Å—É–º–º–∞–º–∏ –±–æ–Ω—É—Å–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—ä—ë–º—ã —Å—Ç–∞–≤–æ–∫ –≤ —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä–∞—Ö:",
        "en": "To meet the wagering conditions for your bonuses, you need to:",
        "tr": "Bonuslarƒ±nƒ±z i√ßin √ßevrim ≈üartlarƒ±nƒ± kar≈üƒ±lamak i√ßin ≈üunlarƒ± yapmalƒ±sƒ±nƒ±z:"
    },
    "status_active": {
        "ru": "–ë–æ—Ç —Å–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–µ–Ω.",
        "en": "The bot is currently active.",
        "tr": "Bot ≈üu anda aktif."
    },
    "status_inactive": {
        "ru": "–ë–æ—Ç —Å–µ–π—á–∞—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å.",
        "en": "The bot is currently stopped. Type /start to activate it.",
        "tr": "Bot ≈üu anda durdurulmu≈ü. Etkinle≈ütirmek i√ßin /start yazƒ±n."
    }
}

def format_number(n):
    n_ceil = math.ceil(n)
    return f"{n_ceil:,}".replace(",", " ")

def get_lang(user_id):
    return user_language.get(user_id, "ru")

def get_translation(key, lang):
    return translations.get(key, {}).get(lang, translations.get(key, {}).get("ru", key))

def generate_result_text(choice, sums, lang):
    is_plural = len(sums) > 1
    results = []
    for num in sums:
        if "–¥–µ–ø–æ–∑–∏—Ç" in choice or "deposit" in choice.lower() or "yatƒ±rƒ±m" in choice.lower():
            sums2 = num * 0.10
            sums3 = sums2 * 15
        elif "–∫—Ä–∏–ø—Ç–æ" in choice or "crypto" in choice.lower() or "kripto" in choice.lower():
            sums2 = num * 0.20
            sums3 = sums2 * 20
        else:
            continue
        slots = sums3 + num
        roulette = sums3 * 3.33 + num
        blackjack = sums3 * 5 + num
        crash = sums3 * 10 + num

        results.append(
            f"Amount: {format_number(num)} som\n"
            f"üîπ Slots (100%) ‚Äî {format_number(slots)} som\n"
            f"üîπ Roulette (30%) ‚Äî {format_number(roulette)} som\n"
            f"üîπ Blackjack (20%) ‚Äî {format_number(blackjack)} som\n"
            f"üîπ Other games (10%) ‚Äî {format_number(crash)} som"
        )
    intro = get_translation("wager_intro_plural" if is_plural else "wager_intro_singular", lang)
    return intro + "\n\n" + "\n\n".join(results)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_language[user_id] = None
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫ / Please choose your language / L√ºtfen dil se√ßiniz:", reply_markup=LANGUAGE_KEYBOARD)

async def language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_language[user_id] = None
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫ / Please choose your language / L√ºtfen dil se√ßiniz:", reply_markup=LANGUAGE_KEYBOARD)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if user_language.get(user_id) is None:
        if "—Ä—É—Å" in text.lower():
            user_language[user_id] = "ru"
        elif "eng" in text.lower():
            user_language[user_id] = "en"
        elif "t√ºrk" in text.lower() or "turk" in text.lower():
            user_language[user_id] = "tr"
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫:", reply_markup=LANGUAGE_KEYBOARD)
            return
        lang = user_language[user_id]
        await update.message.reply_text(get_translation("enter_password", lang))
        return

    lang = get_lang(user_id)

    if not user_authenticated.get(user_id):
        if text == PASSWORD:
            user_authenticated[user_id] = True
            user_active_status[user_id] = True
            user_spam_status[user_id] = True
            user_count_calc[user_id] = 0
            await update.message.reply_text(get_translation("access_granted", lang), reply_markup=ReplyKeyboardMarkup(reply_keyboards[lang], resize_keyboard=True))
        else:
            await update.message.reply_text(get_translation("wrong_password", lang))
        return

    if not user_active_status.get(user_id, True):
        return

    if text.lower() == "stop":
        user_active_status[user_id] = False
        await update.message.reply_text(get_translation("bot_stopped", lang))
        return

    if text.lower() == "stopspam":
        user_spam_status[user_id] = False
        await update.message.reply_text(get_translation("stopspam_confirm", lang))
        return

    if text.lower() in sum(reply_keyboards.values(), []):
        user_choice_data[user_id] = text.lower()
        await update.message.reply_text(get_translation("choose_bonus", lang).format(text=text))
        return

    if user_id in user_choice_data:
        choice = user_choice_data[user_id]
        try:
            sums = [float(s.replace(',', '.')) for s in text.split()]
        except ValueError:
            await update.message.reply_text(get_translation("invalid_number", lang))
            return

        result_text = generate_result_text(choice, sums, lang)
        await update.message.reply_text(result_text)

        user_count_calc[user_id] = user_count_calc.get(user_id, 0) + 1
        count = user_count_calc[user_id]

        if user_spam_status.get(user_id, True):
            await update.message.reply_text(get_translation("reminder", lang))
        else:
            if count % 10 == 0:
                await update.message.reply_text(get_translation("reminder_short", lang))
    else:
        await update.message.reply_text(get_translation("choose_bonus_first", lang), reply_markup=ReplyKeyboardMarkup(reply_keyboards[lang], resize_keyboard=True))

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = get_lang(user_id)
    if not user_authenticated.get(user_id):
        await update.message.reply_text(get_translation("enter_password", lang))
        return
    is_active = user_active_status.get(user_id, True)
    await update.message.reply_text(get_translation("status_active" if is_active else "status_inactive", lang))

if __name__ == '__main__':
    app = ApplicationBuilder().token(os.environ.get("BOT_TOKEN")).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('language', language))
    app.add_handler(CommandHandler('status', status))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
