from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import os
import math

user_choice_data = {}
user_active_status = {}
user_spam_status = {}
user_count_calc = {}
user_authenticated = {}

PASSWORD = "starzbetbot"

reply_keyboard = [['–ö—Ä–∏–ø—Ç–æ/–ë–∞–π –±–æ–Ω—É—Å 20'], ['–î–µ–ø–æ–∑–∏—Ç –±–æ–Ω—É—Å 10']]
markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)

def format_number(n):
    return f"{math.ceil(n):,}".replace(",", " ")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not user_authenticated.get(user_id):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:")
        return
    user_active_status[user_id] = True
    user_spam_status[user_id] = True
    user_count_calc[user_id] = 0
    await update.message.reply_text(
        "–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í—ã–±–µ—Ä–∏ –±–æ–Ω—É—Å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∏ –≤–≤–µ–¥–∏ —Å—É–º–º—É:",
        reply_markup=markup
    )

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not user_authenticated.get(user_id):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å. –ù–∞–ø–∏—à–∏ /start.")
        return
    status_msg = "–ë–æ—Ç —Å–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–µ–Ω." if user_active_status.get(user_id, True) else "–ë–æ—Ç —Å–µ–π—á–∞—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å."
    await update.message.reply_text(status_msg)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if not user_authenticated.get(user_id):
        if text == PASSWORD:
            user_authenticated[user_id] = True
            user_active_status[user_id] = True
            user_spam_status[user_id] = True
            user_count_calc[user_id] = 0
            await update.message.reply_text("–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω! –í—ã–±–µ—Ä–∏ –±–æ–Ω—É—Å –∏ –≤–≤–µ–¥–∏ —Å—É–º–º—É:", reply_markup=markup)
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        return

    if not user_active_status.get(user_id, True):
        return

    if text.lower() == "stop":
        user_active_status[user_id] = False
        await update.message.reply_text("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞, –Ω–∞–ø–∏—à–∏ /start.")
        return

    if text.lower() == "stopspam":
        user_spam_status[user_id] = False
        await update.message.reply_text("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –±–æ–ª—å—à–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç, –∫—Ä–æ–º–µ –∫–∞–∂–¥—ã—Ö 10 –ø–æ–¥—Å—á—ë—Ç–æ–≤.")
        return

    if text.lower() in ['–∫—Ä–∏–ø—Ç–æ/–±–∞–π –±–æ–Ω—É—Å 20', '–¥–µ–ø–æ–∑–∏—Ç –±–æ–Ω—É—Å 10']:
        user_choice_data[user_id] = text.lower()
        await update.message.reply_text(f"–í—ã–±—Ä–∞–Ω: {text}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—É–º–º—É.")
        return

    if user_id not in user_choice_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –±–æ–Ω—É—Å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.", reply_markup=markup)
        return

    choice = user_choice_data[user_id]
    parts = text.replace(",", ".").split()
    valid_sums = []

    for part in parts:
        try:
            valid_sums.append(float(part))
        except ValueError:
            continue

    if not valid_sums:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—É–º–º.")
        return

    is_plural = len(valid_sums) > 1
    intro = (
        "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –æ—Ç—ã–≥—Ä—ã—à–∞ —Å –≤–∞—à–∏–º–∏ —Å—É–º–º–∞–º–∏ –±–æ–Ω—É—Å–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—ä—ë–º—ã —Å—Ç–∞–≤–æ–∫ –≤ —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä–∞—Ö:\n\n"
        if is_plural else
        "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –æ—Ç—ã–≥—Ä—ã—à–∞ —Å –≤–∞—à–µ–π —Å—É–º–º–æ–π –±–æ–Ω—É—Å–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—ä—ë–º—ã —Å—Ç–∞–≤–æ–∫ –≤ —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä–∞—Ö:\n\n"
    )

    results = [intro]

    for idx, sums in enumerate(valid_sums, 1):
        if choice == '–¥–µ–ø–æ–∑–∏—Ç –±–æ–Ω—É—Å 10':
            bonus = sums * 0.10
            wager = bonus * 15
        elif choice == '–∫—Ä–∏–ø—Ç–æ/–±–∞–π –±–æ–Ω—É—Å 20':
            bonus = sums * 0.20
            wager = bonus * 20
        else:
            continue

        slots = wager + sums
        roulette = wager * 3.33 + sums
        blackjack = wager * 5 + sums
        crash = wager * 10 + sums

        if is_plural:
            results.append(f"‚Äî **–°—É–º–º–∞ {idx}: {format_number(sums)} —Å–æ–º–æ–≤**")
        results.append(
            f"üîπ –°–ª–æ—Ç—ã (100%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {format_number(slots)} —Å–æ–º–æ–≤\n"
            f"üîπ Roulette (30%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {format_number(roulette)} —Å–æ–º–æ–≤\n"
            f"üîπ Blackjack (20%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {format_number(blackjack)} —Å–æ–º–æ–≤\n"
            f"üîπ –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ, crash –∏–≥—Ä—ã –∏ –ª–∞–π–≤-–∫–∞–∑–∏–Ω–æ –∏–≥—Ä—ã (10%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {format_number(crash)} —Å–æ–º–æ–≤\n"
        )

    await update.message.reply_text("\n".join(results), parse_mode="Markdown")

    user_count_calc[user_id] = user_count_calc.get(user_id, 0) + 1
    if user_spam_status.get(user_id, True):
        await update.message.reply_text(
            "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã! –≠—Ç–æ –¥–ª—è –≤–∞—à–µ–π –∂–µ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏. "
            "–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –ø–æ–ª—É—á–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ stopspam"
        )
    elif user_count_calc[user_id] % 10 == 0:
        await update.message.reply_text(
            "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã! –≠—Ç–æ –¥–ª—è –≤–∞—à–µ–π –∂–µ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏."
        )

if __name__ == '__main__':
    app = ApplicationBuilder().token(os.environ.get("BOT_TOKEN")).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('status', status))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
    
