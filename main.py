import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters
)

LANGUAGE, PASSWORD, BONUS_SELECTION, AMOUNT = range(4)
user_data = {}

LANGUAGES = {
    '–†—É—Å—Å–∫–∏–π': 'ru',
    'English': 'en',
    'T√ºrk√ße': 'tr'
}

TEXTS = {
    'ru': {
        'choose_language': '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
        'enter_password': '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:',
        'wrong_password': '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
        'password_ok': '–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –í—ã–±–µ—Ä–∏—Ç–µ –±–æ–Ω—É—Å:',
        'choose_bonus': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ–Ω—É—Å–∞:',
        'enter_amount': '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):',
        'invalid_input': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.',
        'results': '–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –æ—Ç—ã–≥—Ä—ã—à–∞ —Å –≤–∞—à–µ–π —Å—É–º–º–æ–π –±–æ–Ω—É—Å–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—ä—ë–º—ã —Å—Ç–∞–≤–æ–∫ –≤ —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä–∞—Ö:'

üîπ –°–ª–æ—Ç—ã (100%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {slots} —Å–æ–º–æ–≤
üîπ Roulette (30%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {roulette} —Å–æ–º–æ–≤
üîπ Blackjack (20%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {blackjack} —Å–æ–º–æ–≤
üîπ –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ, crash –∏–≥—Ä—ã –∏ –ª–∞–π–≤-–∫–∞–∑–∏–Ω–æ –∏–≥—Ä—ã (10%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {crash} —Å–æ–º–æ–≤',
        'reminder': '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–≤–æ–∏ –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã! –≠—Ç–æ –¥–ª—è –≤–∞—à–µ–π –∂–µ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏.',
        'stop_reminder': '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ.',
        'lang_changed': '–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —è–∑—ã–∫:',
    },
    'en': {
        'choose_language': 'Choose your language:',
        'enter_password': 'Enter the password:',
        'wrong_password': 'Wrong password. Try again.',
        'password_ok': 'Correct password. Choose a bonus:',
        'choose_bonus': 'Select bonus type:',
        'enter_amount': 'Enter amount (you can separate with space):',
        'invalid_input': 'Please enter only numbers separated by space.',
        'results': 'To meet the wagering requirements for your bonus amount, you need to wager the following amounts in various games:

üîπ Slots (100%) ‚Äî wager {slots} soms
üîπ Roulette (30%) ‚Äî wager {roulette} soms
üîπ Blackjack (20%) ‚Äî wager {blackjack} soms
üîπ Other table games, crash, and live casino games (10%) ‚Äî wager {crash} soms',
        'reminder': 'Always double-check your final amounts! This is for your safety.',
        'stop_reminder': 'Reminder message disabled.',
        'lang_changed': 'Language changed. Please choose a new language:',
    },
    'tr': {
        'choose_language': 'Dilini se√ßin:',
        'enter_password': '≈ûifreyi girin:',
        'wrong_password': 'Yanlƒ±≈ü ≈üifre. Tekrar deneyin.',
        'password_ok': 'Doƒüru ≈üifre. Bonus se√ßin:',
        'choose_bonus': 'Bonus t√ºr√ºn√º se√ßin:',
        'enter_amount': 'Tutarƒ± girin (bo≈ülukla ayƒ±rabilirsiniz):',
        'invalid_input': 'L√ºtfen sadece bo≈ülukla ayrƒ±lmƒ±≈ü sayƒ±lar girin.',
        'results': 'Bonus tutarƒ±nƒ±z i√ßin gereken √ßevrim hacmi a≈üaƒüƒ±daki gibidir:

üîπ Slotlar (100%) ‚Äî {slots} som bahis
üîπ Rulet (30%) ‚Äî {roulette} som bahis
üîπ Blackjack (20%) ‚Äî {blackjack} som bahis
üîπ Diƒüer masa, crash ve canlƒ± casino oyunlarƒ± (10%) ‚Äî {crash} som bahis',
        'reminder': 'Son tutarlarƒ±nƒ±zƒ± her zaman kontrol edin! Bu sizin i√ßin bir g√ºvenliktir.',
        'stop_reminder': 'Uyarƒ± mesajƒ± devre dƒ±≈üƒ±.',
        'lang_changed': 'Dil deƒüi≈ütirildi. Yeni bir dil se√ßin:',
    },
}

REMINDER_INTERVAL = 7

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[k] for k in LANGUAGES.keys()]
    await update.message.reply_text("Choose language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Dilinizi se√ßin:",
                                    reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True))
    return LANGUAGE

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = LANGUAGES.get(update.message.text)
    if not lang:
        return LANGUAGE
    context.user_data['lang'] = lang
    context.user_data['count'] = 0
    context.user_data['show_reminder'] = True
    await update.message.reply_text(TEXTS[lang]['enter_password'])
    return PASSWORD

async def check_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data['lang']
    if update.message.text.strip() != "starzbot":
        await update.message.reply_text(TEXTS[lang]['wrong_password'])
        return PASSWORD
    keyboard = [["–ë–∞–π –±–æ–Ω—É—Å 20%"], ["–ö—Ä–∏–ø—Ç–æ –±–æ–Ω—É—Å 20%"], ["–î–µ–ø–æ–∑–∏—Ç–Ω—ã–π –±–æ–Ω—É—Å 10%"]]
    await update.message.reply_text(TEXTS[lang]['password_ok'],
                                    reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True))
    return BONUS_SELECTION

async def set_bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['bonus'] = update.message.text
    lang = context.user_data['lang']
    await update.message.reply_text(TEXTS[lang]['enter_amount'])
    return AMOUNT

async def calculate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data['lang']
    bonus = context.user_data['bonus']
    try:
        numbers = list(map(float, update.message.text.strip().split()))
    except:
        await update.message.reply_text(TEXTS[lang]['invalid_input'])
        return AMOUNT

    results = []
    for num in numbers:
        if "10%" in bonus:
            base = num * 0.10 * 15
        else:
            base = num * 0.20 * 15
        results.append({
            'slots': int(base + num),
            'roulette': int(base * 3.33 + num),
            'blackjack': int(base * 5 + num),
            'crash': int(base * 10 + num)
        })

    reply = ""
    for r in results:
        reply += TEXTS[lang]['results'].format(**r) + "\n\n"

    context.user_data['count'] += 1
    if context.user_data.get('show_reminder'):
        reply += TEXTS[lang]['reminder']
    if context.user_data['count'] % REMINDER_INTERVAL == 0:
        reply += f"\n\n{texts[lang]['reminder']}"

    await update.message.reply_text(reply)
    return AMOUNT

async def stopspam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['show_reminder'] = False
    lang = context.user_data.get('lang', 'ru')
    await update.message.reply_text(TEXTS[lang]['stop_reminder'])

async def lang_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[k] for k in LANGUAGES.keys()]
    await update.message.reply_text(TEXTS[context.user_data.get('lang', 'ru')]['lang_changed'],
                                    reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True))
    return LANGUAGE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

def main():
    import logging
    import os
    logging.basicConfig(level=logging.INFO)
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    if not TOKEN:
        raise ValueError("TELEGRAM_TOKEN is not set in environment variables.")

    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_language)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_password)],
            BONUS_SELECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_bonus)],
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, calculate)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(conv)
    app.add_handler(CommandHandler("stopspam", stopspam))
    app.add_handler(CommandHandler("lang", lang_command))

    app.run_polling()

if __name__ == '__main__':
    main()
    
