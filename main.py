from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import os
import math

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —ç—Ç–∞–ø–æ–≤ ConversationHandler
LANGUAGE, PASSWORD = range(2)

user_choice_data = {}
user_active_status = {}
user_spam_status = {}
user_count_calc = {}
user_authenticated = {}
user_language = {}

PASSWORD_TEXT = {
    'ru': "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:",
    'en': "Enter the password to access the bot:",
    'tr': "Bota eri≈ümek i√ßin ≈üifreyi girin:"
}

PASSWORD = "starzbot"

reply_keyboard = {
    'ru': [['–ö—Ä–∏–ø—Ç–æ/–ë–∞–π –±–æ–Ω—É—Å 20'], ['–î–µ–ø–æ–∑–∏—Ç –±–æ–Ω—É—Å 10']],
    'en': [['Crypto/Buy Bonus 20'], ['Deposit Bonus 10']],
    'tr': [['Kripto/Bay Bonus 20'], ['Mevduat Bonusu 10']],
}

markup_dict = {
    lang: ReplyKeyboardMarkup(reply_keyboard[lang], resize_keyboard=True) for lang in reply_keyboard
}

LANGUAGE_KEYBOARD = ReplyKeyboardMarkup([['–†—É—Å—Å–∫–∏–π', 'English', 'T√ºrk√ße']], one_time_keyboard=True, resize_keyboard=True)

def format_number(n):
    n_ceil = math.ceil(n)
    return f"{n_ceil:,}".replace(",", " ")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ó–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language / Dil se√ßin:",
        reply_markup=LANGUAGE_KEYBOARD
    )
    return LANGUAGE

async def language_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.lower()
    if text.startswith('—Ä—É—Å'):
        user_language[user_id] = 'ru'
    elif text.startswith('eng'):
        user_language[user_id] = 'en'
    elif text.startswith('t√ºr'):
        user_language[user_id] = 'tr'
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
        user_language[user_id] = 'ru'

    lang = user_language[user_id]
    await update.message.reply_text(PASSWORD_TEXT[lang], reply_markup=ReplyKeyboardRemove())
    return PASSWORD

async def password_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = user_language.get(user_id, 'ru')
    text = update.message.text.strip()

    if text == PASSWORD:
        user_authenticated[user_id] = True
        user_active_status[user_id] = True
        user_spam_status[user_id] = True
        user_count_calc[user_id] = 0

        await update.message.reply_text(
            {
                'ru': "–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω! –í—ã–±–µ—Ä–∏ –±–æ–Ω—É—Å –∏ –≤–≤–µ–¥–∏ —Å—É–º–º—É:",
                'en': "Access granted! Choose a bonus and enter the amount:",
                'tr': "Eri≈üim saƒülandƒ±! Bir bonus se√ßin ve miktarƒ± girin:"
            }[lang],
            reply_markup=markup_dict[lang]
        )
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            {
                'ru': "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
                'en': "Incorrect password. Please try again.",
                'tr': "Yanlƒ±≈ü ≈üifre. L√ºtfen tekrar deneyin."
            }[lang]
        )
        return PASSWORD

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = user_language.get(user_id, 'ru')

    if not user_authenticated.get(user_id):
        await update.message.reply_text(
            {
                'ru': "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å. –ù–∞–ø–∏—à–∏ /start.",
                'en': "Please enter password first. Type /start.",
                'tr': "√ñnce ≈üifreyi girin. /start yazƒ±n."
            }[lang]
        )
        return

    is_active = user_active_status.get(user_id, True)
    await update.message.reply_text(
        {
            'ru': "–ë–æ—Ç —Å–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–µ–Ω." if is_active else "–ë–æ—Ç —Å–µ–π—á–∞—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å.",
            'en': "Bot is active now." if is_active else "Bot is stopped now. Write /start to activate.",
            'tr': "Bot ≈üu anda aktif." if is_active else "Bot ≈üu anda durduruldu. Ba≈ülatmak i√ßin /start yazƒ±n."
        }[lang]
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = user_language.get(user_id, 'ru')
    text = update.message.text.strip()

    if not user_authenticated.get(user_id):
        await update.message.reply_text(
            {
                'ru': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å.",
                'en': "Please use /start first to begin and enter password.",
                'tr': "L√ºtfen √∂nce /start komutunu kullanarak ba≈ülayƒ±n ve ≈üifreyi girin."
            }[lang]
        )
        return

    if not user_active_status.get(user_id, True):
        return

    if text.lower() == "stop":
        user_active_status[user_id] = False
        await update.message.reply_text(
            {
                'ru': "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞, –Ω–∞–ø–∏—à–∏ /start.",
                'en': "Bot stopped. To start again, type /start.",
                'tr': "Bot durduruldu. Tekrar ba≈ülatmak i√ßin /start yazƒ±n."
            }[lang]
        )
        return

    if text.lower() == "stopspam":
        user_spam_status[user_id] = False
        await update.message.reply_text(
            {
                'ru': "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –±–æ–ª—å—à–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç, –∫—Ä–æ–º–µ –∫–∞–∂–¥—ã—Ö 10 –ø–æ–¥—Å—á—ë—Ç–æ–≤.",
                'en': "Warnings will no longer be shown, except every 10 calculations.",
                'tr': "Uyarƒ±lar artƒ±k g√∂sterilmeyecek, sadece her 10 hesaplamada bir."
            }[lang]
        )
        return

    bonuses = {
        'ru': ['–∫—Ä–∏–ø—Ç–æ/–±–∞–π –±–æ–Ω—É—Å 20', '–¥–µ–ø–æ–∑–∏—Ç –±–æ–Ω—É—Å 10'],
        'en': ['crypto/buy bonus 20', 'deposit bonus 10'],
        'tr': ['kripto/bay bonus 20', 'mevduat bonusu 10'],
    }

    if text.lower() in bonuses[lang]:
        user_choice_data[user_id] = text.lower()
        await update.message.reply_text(
            {
                'ru': f"–í—ã–±—Ä–∞–Ω: {text}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—É–º–º—É.",
                'en': f"Selected: {text}. Now enter the amount.",
                'tr': f"Se√ßildi: {text}. ≈ûimdi miktarƒ± girin."
            }[lang]
        )
        return

    if user_id in user_choice_data:
        choice = user_choice_data[user_id]
        try:
            sums = [float(s.replace(',', '.')) for s in text.split()]
        except ValueError:
            await update.message.reply_text(
                {
                    'ru': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ —á–∏—Å–ª–∞.",
                    'en': "Please enter a valid number or numbers.",
                    'tr': "L√ºtfen ge√ßerli bir sayƒ± veya sayƒ±lar girin."
                }[lang]
            )
            return

        results = []
        for num in sums:
            if choice == bonuses[lang][1]:  # –¥–µ–ø–æ–∑–∏—Ç –±–æ–Ω—É—Å 10
                bonus = num * 0.10
                required = bonus * 15
            elif choice == bonuses[lang][0]:  # –∫—Ä–∏–ø—Ç–æ/–±–∞–π –±–æ–Ω—É—Å 20
                bonus = num * 0.20
                required = bonus * 20
            else:
                continue

            slots = required + num
            roulette = required * 3.33 + num
            blackjack = required * 5 + num
            crash = required * 10 + num

            results.append(
                f"–°—É–º–º–∞: {format_number(num)} —Å–æ–º–æ–≤\n"
                f"üîπ –°–ª–æ—Ç—ã (100%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {format_number(slots)} —Å–æ–º–æ–≤\n"
                f"üîπ Roulette (30%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {format_number(roulette)} —Å–æ–º–æ–≤\n"
                f"üîπ Blackjack (20%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {format_number(blackjack)} —Å–æ–º–æ–≤\n"
                f"üîπ –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ, crash –∏–≥—Ä—ã –∏ –ª–∞–π–≤-–∫–∞–∑–∏–Ω–æ –∏–≥—Ä—ã (10%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {format_number(crash)} —Å–æ–º–æ–≤"
            )

        intro = {
            'ru': "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –æ—Ç—ã–≥—Ä—ã—à–∞ —Å –≤–∞—à–∏–º–∏ —Å—É–º–º–∞–º–∏ –±–æ–Ω—É—Å–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—ä—ë–º—ã —Å—Ç–∞–≤–æ–∫ –≤ —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä–∞—Ö:\n",
            'en': "To meet the wagering requirements for your bonus amounts, you will need to place the following bets in different games:\n",
            'tr': "Bonus tutarlarƒ± i√ßin √ßevrim ≈üartlarƒ±nƒ± kar≈üƒ±lamak amacƒ±yla farklƒ± oyunlarda yapƒ±lmasƒ± gereken bahis miktarlarƒ±:\n"
        }[lang]

        result_text = intro + "\n\n".join(results)
        await update.message.reply_text(result_text)

        user_count_calc[user_id] = user_count_calc.get(user_id, 0) + 1
        count = user_count_calc[user_id]

        if user_spam_status.get(user_id, True):
            await update.message.reply_text(
                {
                    'ru': "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã! –≠—Ç–æ –¥–ª—è –≤–∞—à–µ–π –∂–µ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏. –ï—Å–ª–∏ –∂–µ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–±—ã —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –ø–æ—è–≤–ª—è–ª–æ—Å—å, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ stopspam",
                    'en': "Please double-check the final amounts! This is for your own protection. If you want to stop seeing this message, type stopspam",
                    'tr': "L√ºtfen nihai tutarlarƒ± tekrar kontrol edin! Bu sizin g√ºvenliƒüiniz i√ßin. Bu mesajƒ±n tekrar g√∂r√ºnmemesini istiyorsanƒ±z stopspam yazƒ±n."
                }[lang]
            )
        else:
            if count % 10 == 0:
                await update.message.reply_text(
                    {
                        'ru': "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã! –≠—Ç–æ –¥–ª—è –≤–∞—à–µ–π –∂–µ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏.",
                        'en': "Please double-check the final amounts! This is for your own protection.",
                        'tr': "L√ºtfen nihai tutarlarƒ± tekrar kontrol edin! Bu sizin g√ºvenliƒüiniz i√ßin."
                    }[lang]
                )
    else:
        await update.message.reply_text(
            {
                'ru': "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –±–æ–Ω—É—Å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.",
                'en': "First choose a bonus with the button below.",
                'tr': "√ñnce a≈üaƒüƒ±daki butondan bir bonus se√ßin."
            }[lang],
            reply_markup=markup_dict.get(lang)
        )

async def change_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language / Dil se√ßin:",
        reply_markup=LANGUAGE_KEYBOARD
    )
    return LANGUAGE

def main():
    app = ApplicationBuilder().token(os.environ.get("BOT_TOKEN")).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, language_handler)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, password_handler)],
        },
        fallbacks=[]
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler('status', status))
    app.add_handler(CommandHandler('lang', change_language))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == '__main__':
    main()
