from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
LANG, PASSWORD, BONUS_TYPE, SUMS_INPUT = range(4)

# –ü–∞—Ä–æ–ª—å
PASSWORD_CORRECT = "starzbot"

# –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ç—Ä—ë—Ö —è–∑—ã–∫–∞—Ö
TEXTS = {
    'ru': {
        'ask_password': "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
        'wrong_password': "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
        'choose_bonus': "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ–Ω—É—Å–∞:\n1. –ö—Ä–∏–ø—Ç–æ –±–æ–Ω—É—Å 20%\n2. –ë–∞–π –±–æ–Ω—É—Å 20%\n3. –î–µ–ø–æ–∑–∏—Ç–Ω—ã–π –±–æ–Ω—É—Å 10%",
        'ask_sum': "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É(—ã) –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):",
        'stopspam_enabled': "–°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ /spam",
        'stopspam_disabled': "–°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.",
        'spam_message': "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–≤–æ–∏ –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã! –≠—Ç–æ –¥–ª—è –≤–∞—à–µ–π –∂–µ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏.",
        'invalid_sum': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.",
    },
    'en': {
        'ask_password': "Enter the password:",
        'wrong_password': "Wrong password. Try again.",
        'choose_bonus': "Choose bonus type:\n1. Crypto bonus 20%\n2. Buy bonus 20%\n3. Deposit bonus 10%",
        'ask_sum': "Enter amount(s) for calculation (multiple allowed separated by space):",
        'stopspam_enabled': "Warning messages disabled. To enable, type /spam",
        'stopspam_disabled': "Warning messages enabled.",
        'spam_message': "Always check your final sums! This is for your own safety.",
        'invalid_sum': "Please enter a valid number or multiple numbers separated by spaces.",
    },
    'tr': {
        'ask_password': "Parolayƒ± girin:",
        'wrong_password': "Yanlƒ±≈ü parola. Tekrar deneyin.",
        'choose_bonus': "Bonus t√ºr√ºn√º se√ßin:\n1. Kripto bonus %20\n2. Bay bonus %20\n3. Mevduat bonusu %10",
        'ask_sum': "Hesaplama i√ßin miktar(lar) girin (birden fazlasƒ± aralarƒ±na bo≈üluk koyarak):",
        'stopspam_enabled': "Uyarƒ± mesajlarƒ± kapatƒ±ldƒ±. A√ßmak i√ßin /spam yazƒ±n",
        'stopspam_disabled': "Uyarƒ± mesajlarƒ± a√ßƒ±ldƒ±.",
        'spam_message': "Her zaman nihai tutarlarƒ± kontrol edin! Bu sizin g√ºvenliƒüiniz i√ßin.",
        'invalid_sum': "L√ºtfen ge√ßerli bir sayƒ± veya bo≈üluklarla ayrƒ±lmƒ±≈ü birden fazla sayƒ± girin.",
    }
}

BONUS_PERCENT = {
    '1': 0.20,  # Crypto bonus 20%
    '2': 0.20,  # Buy bonus 20%
    '3': 0.10,  # Deposit bonus 10%
}

def format_number(num):
    return f"{num:,}".replace(',', ' ')

def get_bets_text(lang, slots, roulette, blackjack, crash):
    if lang == 'ru':
        text = (
            "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –æ—Ç—ã–≥—Ä—ã—à–∞ —Å –≤–∞—à–µ–π —Å—É–º–º–æ–π –±–æ–Ω—É—Å–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—ä—ë–º—ã —Å—Ç–∞–≤–æ–∫ –≤ —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä–∞—Ö:\n\n"
            f"üîπ –°–ª–æ—Ç—ã (100%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {format_number(slots)} —Å–æ–º–æ–≤\n\n"
            f"üîπ Roulette (30%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {format_number(roulette)} —Å–æ–º–æ–≤\n\n"
            f"üîπ Blackjack (20%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {format_number(blackjack)} —Å–æ–º–æ–≤\n\n"
            f"üîπ –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ, crash –∏–≥—Ä—ã –∏ –ª–∞–π–≤-–∫–∞–∑–∏–Ω–æ –∏–≥—Ä—ã (10%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {format_number(crash)} —Å–æ–º–æ–≤"
        )
    elif lang == 'en':
        text = (
            "To meet the wagering requirements with your bonus amount, you need to place bets in the following games:\n\n"
            f"üîπ Slots (100%) ‚Äî wager {format_number(slots)} som\n\n"
            f"üîπ Roulette (30%) ‚Äî wager {format_number(roulette)} som\n\n"
            f"üîπ Blackjack (20%) ‚Äî wager {format_number(blackjack)} som\n\n"
            f"üîπ Other table, crash and live casino games (10%) ‚Äî wager {format_number(crash)} som"
        )
    elif lang == 'tr':
        text = (
            "Bonus tutarƒ±nƒ±zla √ßevrim ≈üartlarƒ±nƒ± yerine getirmek i√ßin a≈üaƒüƒ±daki oyunlarda ≈üu bahis miktarlarƒ±nƒ± yapmanƒ±z gerekir:\n\n"
            f"üîπ Slotlar (100%) ‚Äî {format_number(slots)} som bahis\n\n"
            f"üîπ Rulet (30%) ‚Äî {format_number(roulette)} som bahis\n\n"
            f"üîπ Blackjack (20%) ‚Äî {format_number(blackjack)} som bahis\n\n"
            f"üîπ Diƒüer masa oyunlarƒ±, crash ve canlƒ± casino oyunlarƒ± (10%) ‚Äî {format_number(crash)} som bahis"
        )
    else:
        text = "Language not supported."
    return text

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥, –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
    keyboard = [['–†—É—Å—Å–∫–∏–π', 'English', 'T√ºrk√ße']]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language / Dil se√ßin:",
        reply_markup=None
    )
    return LANG

async def lang_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if '—Ä—É—Å' in text:
        context.user_data['lang'] = 'ru'
    elif 'eng' in text:
        context.user_data['lang'] = 'en'
    elif 't√ºrk' in text or 'turk' in text:
        context.user_data['lang'] = 'tr'
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return LANG

    await update.message.reply_text(TEXTS[context.user_data['lang']]['ask_password'])
    return PASSWORD

async def password_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.strip() == PASSWORD_CORRECT:
        await update.message.reply_text(TEXTS[context.user_data['lang']]['choose_bonus'])
        return BONUS_TYPE
    else:
        await update.message.reply_text(TEXTS[context.user_data['lang']]['wrong_password'])
        return PASSWORD

async def bonus_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text.strip()
    if choice not in BONUS_PERCENT:
        await update.message.reply_text(TEXTS[context.user_data['lang']]['choose_bonus'])
        return BONUS_TYPE
    context.user_data['bonus_percent'] = BONUS_PERCENT[choice]
    await update.message.reply_text(TEXTS[context.user_data['lang']]['ask_sum'])
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–ª–∞–≥
    context.user_data.setdefault('spam_counter', 0)
    context.user_data.setdefault('stop_spam', False)
    return SUMS_INPUT

async def sums_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get('lang', 'ru')
    text = update.message.text.strip()
    parts = text.split()
    numbers = []
    for part in parts:
        try:
            n = int(part.replace(' ', ''))
            if n > 0:
                numbers.append(n)
        except:
            pass
    if not numbers:
        await update.message.reply_text(TEXTS[lang]['invalid_sum'])
        return SUMS_INPUT

    total = sum(numbers)
    bonus_percent = context.user_data.get('bonus_percent', 0.10)

    sums2 = total * bonus_percent
    sums3 = sums2 * 15
    slots = sums3 + total
    roulette = sums3 * 3.33 + total
    blackjack = sums3 * 5 + total
    crash = sums3 * 10 + total

    message = get_bets_text(lang, int(slots), int(roulette), int(blackjack), int(crash))

    # –°–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏—è
    spam_counter = context.user_data.get('spam_counter', 0) + 1
    context.user_data['spam_counter'] = spam_counter
    stop_spam = context.user_data.get('stop_spam', False)

    await update.message.reply_text(message)

    if not stop_spam or (spam_counter % 7 == 0):
        await update.message.reply_text(TEXTS[lang]['spam_message'])

    return SUMS_INPUT

async def stopspam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get('lang', 'ru')
    context.user_data['stop_spam'] = True
    await update.message.reply_text(TEXTS[lang]['stopspam_enabled'])

async def spam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get('lang', 'ru')
    context.user_data['stop_spam'] = False
    await update.message.reply_text(TEXTS[lang]['stopspam_disabled'])

async def lang_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language / Dil se√ßin:")
    return LANG

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞.")
    return ConversationHandler.END

def main():
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    if not TOKEN:
        raise ValueError("TELEGRAM_TOKEN is not set in environment variables.")

    app = ApplicationBuilder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start), CommandHandler('lang', lang_command)],
        states={
            LANG: [MessageHandler(filters.TEXT & ~filters.COMMAND, lang_choice)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, password_check)],
            BONUS_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, bonus_choice)],
            SUMS_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, sums_input)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True,
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("stopspam", stopspam))
    app.add_handler(CommandHandler("spam", spam))

    app.run_polling()

if __name__ == '__main__':
    main()
    
