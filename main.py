import logging
import sqlite3
import json
import os
import random

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters, ConversationHandler, CallbackQueryHandler
)

import openai
from prompts import TRAINING_PROMPT  # –∏–º–ø–æ—Ä—Ç –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ prompts.py

# === CONFIG ===
BOT_TOKEN = os.environ["BOT_TOKEN"]
API_KEY = os.environ["OPENAI_KEY"]
openai.api_key = API_KEY

DB_FILE = "data.db"
SCENARIO_FILE = "scenarios.json"
RULES_FOLDER = "rules"
BOT_PASSWORD = "starzbot"
ADMIN_PASSWORD = "starz123321"

# === STATES ===
(
    PASSWORD_STATE, AUTH_CHOICE, REGISTER_LOGIN, REGISTER_PASS,
    LOGIN_LOGIN, LOGIN_PASS,
    TRAINING, AWAITING_ANSWER,
    ADMIN_PASS, ADMIN_CMD,
    ERROR_REPORT
) = range(11)

# === LOGGER ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === SESSION ===
session = {}

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–∏–ª –∏–∑ –ø–∞–ø–∫–∏ rules ===
def load_rules():
    rules_data = {}
    if not os.path.exists(RULES_FOLDER):
        logger.warning(f"–ü–∞–ø–∫–∞ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ {RULES_FOLDER} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return rules_data
    for filename in os.listdir(RULES_FOLDER):
        if filename.endswith(".txt"):
            path = os.path.join(RULES_FOLDER, filename)
            with open(path, encoding="utf-8") as f:
                content = f.read()
                key = os.path.splitext(filename)[0].lower()
                rules_data[key] = content
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–∞–≤–∏–ª –∏–∑ {len(rules_data)} —Ñ–∞–π–ª–æ–≤ –∏–∑ {RULES_FOLDER}")
    return rules_data

# === DATABASE INIT ===
def init_db():
    with sqlite3.connect(DB_FILE) as conn:
        c = conn.cursor()
        c.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                login TEXT UNIQUE,
                password TEXT
            )
        ''')
        c.execute('''
            CREATE TABLE IF NOT EXISTS logs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                question TEXT,
                answer TEXT,
                evaluation TEXT,
                grammar_issues TEXT,
                correct_answer TEXT
            )
        ''')
        c.execute('''
            CREATE TABLE IF NOT EXISTS error_reports (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                question TEXT,
                answer TEXT,
                evaluation TEXT
            )
        ''')
        c.execute('''
            CREATE TABLE IF NOT EXISTS mistakes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                question TEXT,
                answer TEXT,
                evaluation TEXT,
                resolved INTEGER DEFAULT 0
            )
        ''')
        conn.commit()

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ ===
def load_scenarios():
    with open(SCENARIO_FILE, encoding='utf-8') as f:
        data = json.load(f)
    random.shuffle(data)
    return data

# === –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò ===
async def evaluate_answer(entry, user_answer):
    question = entry["question"]
    expected_answer = entry["expected_answer"]

    prompt = TRAINING_PROMPT.format(question=question, expected_answer=expected_answer)
    prompt += f"\n\n–û—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n{user_answer}"

    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=300,
            temperature=0
        )
        content = response["choices"][0]["message"]["content"].strip()
        return content
    except Exception as e:
        logger.error(f"OpenAI error: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# === /auth ===
async def auth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:")
    return PASSWORD_STATE

async def password_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    password = update.message.text.strip()
    if password == BOT_PASSWORD:
        keyboard = [
            [InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")],
            [InlineKeyboardButton("–í—Ö–æ–¥", callback_data="login")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        return AUTH_CHOICE
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /auth.")
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–≤—Ö–æ–¥–∞
async def auth_choice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    choice = query.data

    if choice == "register":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
        return REGISTER_LOGIN
    elif choice == "login":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –≤—Ö–æ–¥–∞:")
        return LOGIN_LOGIN
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /auth.")
        return ConversationHandler.END

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Äî –≤–≤–æ–¥ –ª–æ–≥–∏–Ω–∞
async def register_login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    login = update.message.text.strip()
    if not login:
        await update.message.reply_text("–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
        return REGISTER_LOGIN

    context.user_data['register_login'] = login
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
    return REGISTER_PASS

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Äî –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è
async def register_pass(update: Update, context: ContextTypes.DEFAULT_TYPE):
    password = update.message.text.strip()
    login = context.user_data.get('register_login')
    user_id = update.effective_user.id
    username = update.effective_user.username or ""

    if not password:
        await update.message.reply_text("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        return REGISTER_PASS

    try:
        with sqlite3.connect(DB_FILE) as conn:
            c = conn.cursor()
            c.execute("SELECT * FROM users WHERE login=?", (login,))
            if c.fetchone():
                await update.message.reply_text("‚ùå –¢–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /auth.")
                return ConversationHandler.END

            c.execute("INSERT INTO users (user_id, username, login, password) VALUES (?, ?, ?, ?)",
                      (user_id, username, login, password))
            conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    session[user_id] = {"authenticated": True, "login": login}
    await update.message.reply_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
    return ConversationHandler.END

# –í—Ö–æ–¥ ‚Äî –≤–≤–æ–¥ –ª–æ–≥–∏–Ω–∞
async def login_login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    login = update.message.text.strip()
    if not login:
        await update.message.reply_text("–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
        return LOGIN_LOGIN

    context.user_data['login_login'] = login
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞:")
    return LOGIN_PASS

# –í—Ö–æ–¥ ‚Äî –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è
async def login_pass(update: Update, context: ContextTypes.DEFAULT_TYPE):
    password = update.message.text.strip()
    login = context.user_data.get('login_login')
    user_id = update.effective_user.id

    if not password:
        await update.message.reply_text("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        return LOGIN_PASS

    try:
        with sqlite3.connect(DB_FILE) as conn:
            c = conn.cursor()
            c.execute("SELECT * FROM users WHERE login=? AND password=?", (login, password))
            user = c.fetchone()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    if user:
        session[user_id] = {"authenticated": True, "login": login}
        await update.message.reply_text("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
        return ConversationHandler.END
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /auth —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

# === /start - –Ω–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in session or not session[user_id].get("authenticated"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /auth.")
        return ConversationHandler.END

    if session[user_id].get("is_admin_conversation"):
        session[user_id]["is_admin_conversation"] = False

    scenario = load_scenarios()
    session[user_id]["scenario"] = scenario
    session[user_id]["step"] = 0
    session[user_id]["score"] = {"correct": 0, "incorrect": 0}

    return await ask_next(update, context)

async def ask_next(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    step = session[user_id].get("step", 0)
    scenario = session[user_id].get("scenario", [])

    if step >= len(scenario):
        await update.message.reply_text("‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ /stop –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return ConversationHandler.END

    current = scenario[step]
    session[user_id]["current"] = current
    await update.message.reply_text(f"–í–æ–ø—Ä–æ—Å: {current['question']}")
    return AWAITING_ANSWER

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–º–∞–Ω–¥ –≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ===
async def process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if user_id not in session or "current" not in session[user_id]:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start.")
        return

    if session.get(user_id, {}).get("is_admin_conversation", False):
        await update.message.reply_text("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if text.lower() == "/answer":
        last = session.get(user_id, {}).get("last")
        if last:
            await update.message.reply_text(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{last['correct_answer']}")
        else:
            await update.message.reply_text("–ù–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞.")
        return

    if text.lower() == "/error":
        last = session.get(user_id, {}).get("last")
        if not last:
            await update.message.reply_text("–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã.")
            return
        try:
            with sqlite3.connect(DB_FILE) as conn:
                c = conn.cursor()
                c.execute(
                    "INSERT INTO error_reports (user_id, question, answer, evaluation) VALUES (?, ?, ?, ?)",
                    (user_id, last["question"], last["answer"], last["evaluation"])
                )
                conn.commit()
            await update.message.reply_text("–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    entry = session[user_id]["current"]
    evaluation_text = await evaluate_answer(entry, text)

    evaluation_simple = "incorrect"
    lower_eval = evaluation_text.lower()
    if "–ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–µ—Ä–Ω–æ" in lower_eval or "‚úÖ" in evaluation_text or "–≤–µ—Ä–Ω–æ" in lower_eval:
        evaluation_simple = "correct"

    session[user_id]["last"] = {
        "question": entry["question"],
        "answer": text,
        "evaluation": evaluation_simple,
        "correct_answer": entry["expected_answer"]
    }

    try:
        with sqlite3.connect(DB_FILE) as conn:
            c = conn.cursor()
            c.execute("""
                INSERT INTO logs (user_id, question, answer, evaluation, grammar_issues, correct_answer)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (user_id, entry["question"], text, evaluation_simple, "", entry["expected_answer"]))
            conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: {e}")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç–∞
    if "score" not in session[user_id]:
        session[user_id]["score"] = {"correct": 0, "incorrect": 0}
    session[user_id]["score"].setdefault("correct", 0)
    session[user_id]["score"].setdefault("incorrect", 0)
    session[user_id]["score"][evaluation_simple] += 1

    if evaluation_simple == "correct":
        await update.message.reply_text(f"‚úÖ –í–µ—Ä–Ω–æ!\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ò–ò:\n{evaluation_text}")
        session[user_id]["step"] += 1
        return await ask_next(update, context)
    else:
        await update.message.reply_text(f"‚ùå –ù–µ —Å–æ–≤—Å–µ–º.\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ò–ò:\n{evaluation_text}")

# === /stop ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ===
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    score = session.get(user_id, {}).get("score", {"correct":0,"incorrect":0})
    msg = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
           f"‚úÖ –í–µ—Ä–Ω—ã—Ö: {score.get('correct', 0)}\n"
           f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã—Ö: {score.get('incorrect', 0)}")
    await update.message.reply_text(msg)

# === /answer ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ===
async def show_correct(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    last = session.get(user_id, {}).get("last")
    if not last:
        await update.message.reply_text("–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞.")
        return
    await update.message.reply_text(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{last['correct_answer']}")

# === /error ‚Äî –∂–∞–ª–æ–±–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç ===
async def report_error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    last = session.get(user_id, {}).get("last")
    if not last:
        await update.message.reply_text("–ù–µ—Ç –∂–∞–ª–æ–±—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        return

    try:
        with sqlite3.connect(DB_FILE) as conn:
            c = conn.cursor()
            c.execute("INSERT INTO error_reports (user_id, question, answer, evaluation) VALUES (?, ?, ?, ?)",
                      (user_id, last["question"], last["answer"], last["evaluation"]))
            conn.commit()
        await update.message.reply_text("–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === /admin ‚Äî –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞ —Å –ø–∞—Ä–æ–ª–µ–º ===
async def admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    return ADMIN_PASS

async def admin_pass_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    password = update.message.text.strip()
    user_id = update.effective_user.id

    if password == ADMIN_PASSWORD:
        session.setdefault(user_id, {})
        session[user_id]["is_admin_conversation"] = True
        session[user_id]["is_admin"] = True
        await update.message.reply_text(
            "–î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n"
            "/mistake - –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫–∏\n"
            "/done <ID> - –ø–æ–º–µ—Ç–∏—Ç—å –æ—à–∏–±–∫—É —Ä–µ—à—ë–Ω–Ω–æ–π\n"
            "/exit - –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        )
        return ADMIN_CMD
    else:
        if user_id in session:
            session[user_id]["is_admin_conversation"] = False
            session[user_id]["is_admin"] = False
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞
async def admin_exit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in session:
        session[user_id]["is_admin_conversation"] = False
        session[user_id]["is_admin"] = False
    await update.message.reply_text("–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
    return ConversationHandler.END

# –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫–∏ /mistake
async def show_mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not session.get(user_id, {}).get("is_admin"):
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    try:
        with sqlite3.connect(DB_FILE) as conn:
            c = conn.cursor()
            c.execute("SELECT id, question, answer, evaluation, resolved FROM mistakes WHERE resolved=0")
            rows = c.fetchall()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return

    if not rows:
        await update.message.reply_text("–ù–µ—Ç –Ω–µ—Ä–µ—à—ë–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫.")
        return

    msg = "–ù–µ—Ä–µ—à—ë–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:\n"
    for row in rows:
        msg += f"ID: {row[0]}\n–í–æ–ø—Ä–æ—Å: {row[1]}\n–û—Ç–≤–µ—Ç: {row[2]}\n–û—Ü–µ–Ω–∫–∞: {row[3]}\n\n"
    await update.message.reply_text(msg)

# –ü–æ–º–µ—Ç–∏—Ç—å –æ—à–∏–±–∫—É —Ä–µ—à—ë–Ω–Ω–æ–π /done ID
async def done_mistake(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not session.get(user_id, {}).get("is_admin"):
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    args = context.args
    if not args or not args[0].isdigit():
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /done <ID>")
        return

    mistake_id = int(args[0])
    try:
        with sqlite3.connect(DB_FILE) as conn:
            c = conn.cursor()
            c.execute("UPDATE mistakes SET resolved=1 WHERE id=?", (mistake_id,))
            conn.commit()
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Å ID {mistake_id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω–∞—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === /help ===
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "/auth - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è –∏ –≤—Ö–æ–¥/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/answer - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å\n"
        "/error - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç\n"
        "/admin - –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å)\n"
        "/exit - –≤—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞\n"
        # –ö–æ–º–∞–Ω–¥—ã /mistake –∏ /done –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
    )
    await update.message.reply_text(msg)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω —Ä–µ–∂–∏–º –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç ===
async def handle_admin_password_anytime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    if text == ADMIN_PASSWORD:
        session.setdefault(user_id, {})
        session[user_id]["is_admin_conversation"] = True
        session[user_id]["is_admin"] = True
        await update.message.reply_text(
            "–î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n"
            "/mistake - –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫–∏\n"
            "/done <ID> - –ø–æ–º–µ—Ç–∏—Ç—å –æ—à–∏–±–∫—É —Ä–µ—à—ë–Ω–Ω–æ–π\n"
            "/exit - –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        )
        return ADMIN_CMD
    return  # –ò–Ω–∞—á–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ===
def main():
    init_db()
    rules = load_rules()  # –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –µ—Å–ª–∏ –±—É–¥–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_conv = ConversationHandler(
        entry_points=[CommandHandler("auth", auth)],
        states={
            PASSWORD_STATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, password_input)],
            AUTH_CHOICE: [CallbackQueryHandler(auth_choice_handler)],
            REGISTER_LOGIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_login)],
            REGISTER_PASS: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_pass)],
            LOGIN_LOGIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_login)],
            LOGIN_PASS: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_pass)],
        },
        fallbacks=[],
        allow_reentry=True,
    )
    app.add_handler(auth_conv)

    # –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(CommandHandler("answer", show_correct))
    app.add_handler(CommandHandler("error", report_error))

    # –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω —Ä–µ–∂–∏–º –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç (—Ç–µ–∫—Å—Ç)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_password_anytime), group=1)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process), group=2)

    # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    admin_conv = ConversationHandler(
        entry_points=[CommandHandler("admin", admin_start)],
        states={
            ADMIN_PASS: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_pass_input)],
            ADMIN_CMD: [
                CommandHandler("mistake", show_mistakes),
                CommandHandler("done", done_mistake),
                CommandHandler("exit", admin_exit),
                CommandHandler("cancel", admin_exit)
            ]
        },
        fallbacks=[],
        allow_reentry=True,
    )
    app.add_handler(admin_conv)

    # –ü–æ–º–æ—â—å –∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.COMMAND, unknown))

    app.run_polling()

if __name__ == "__main__":
    main()
