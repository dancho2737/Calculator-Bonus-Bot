from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import os
import math
import unicodedata

user_choice_data = {}
user_active_status = {}
user_spam_status = {}
user_count_calc = {}
user_authenticated = {}
user_language = {}

PASSWORD = "starzbot"

LANGUAGES = {
    "ru": "–†—É—Å—Å–∫–∏–π",
    "en": "English",
    "tr": "T√ºrk√ße"
}

# –ö–Ω–æ–ø–∫–∏ –±–æ–Ω—É—Å–æ–≤ –ø–æ —è–∑—ã–∫–∞–º
BONUSES = {
    "ru": ['–ö—Ä–∏–ø—Ç–æ/–ë–∞–π –±–æ–Ω—É—Å 20', '–î–µ–ø–æ–∑–∏—Ç –±–æ–Ω—É—Å 10'],
    "en": ['Crypto/Buy bonus 20', 'Deposit bonus 10'],
    "tr": ['Kripto/Bayi bonusu 20', 'Mevduat bonusu 10']
}

def format_number(n):
    n_ceil = math.ceil(n)
    # –í–µ–∑–¥–µ –ø—Ä–æ–±–µ–ª –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç—ã—Å—è—á
    return f"{n_ceil:,}".replace(",", " ")

def get_bonus_keyboard(lang):
    return ReplyKeyboardMarkup([[b] for b in BONUSES.get(lang, BONUSES['ru'])], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    if user_id not in user_language:
        user_language[user_id] = 'ru'

    if not user_authenticated.get(user_id):
        await update.message.reply_text({
            'ru': "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:",
            'en': "Enter password to access the bot:",
            'tr': "Bota eri≈üim i√ßin ≈üifreyi girin:"
        }[user_language[user_id]])
        return

    user_active_status[user_id] = True
    user_spam_status[user_id] = True
    user_count_calc[user_id] = 0

    await update.message.reply_text({
        'ru': "–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í—ã–±–µ—Ä–∏ –±–æ–Ω—É—Å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∏ –≤–≤–µ–¥–∏ —Å—É–º–º—É:",
        'en': "Bot activated. Choose a bonus to calculate and enter the amount:",
        'tr': "Bot etkinle≈ütirildi. Hesaplamak i√ßin bir bonus se√ßin ve tutarƒ± girin:"
    }[user_language[user_id]], reply_markup=get_bonus_keyboard(user_language[user_id]))

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = user_language.get(user_id, 'ru')

    if not user_authenticated.get(user_id):
        await update.message.reply_text({
            'ru': "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å. –ù–∞–ø–∏—à–∏ /start.",
            'en': "Please enter the password first. Type /start.",
            'tr': "√ñnce ≈üifreyi girin. /start yazƒ±n."
        }[lang])
        return

    is_active = user_active_status.get(user_id, True)
    await update.message.reply_text({
        'ru': "–ë–æ—Ç —Å–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–µ–Ω." if is_active else "–ë–æ—Ç —Å–µ–π—á–∞—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å.",
        'en': "The bot is active now." if is_active else "The bot is stopped now. Type /start to activate.",
        'tr': "Bot ≈üu anda aktif." if is_active else "Bot ≈üu anda durduruldu. Yeniden ba≈ülatmak i√ßin /start yazƒ±n."
    }[lang])

async def language_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    keyboard = ReplyKeyboardMarkup([[v] for v in LANGUAGES.values()], resize_keyboard=True)
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Please select a language / L√ºtfen bir dil se√ßin:",
        reply_markup=keyboard
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    lang = user_language.get(user_id, 'ru')

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —è–∑—ã–∫ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if text in LANGUAGES.values():
        # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ —Å –∫–ª—é—á–æ–º
        for key, val in LANGUAGES.items():
            if val == text:
                user_language[user_id] = key
                lang = key
                break
        user_choice_data.pop(user_id, None)  # —Å–±—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –±–æ–Ω—É—Å–∞
        await update.message.reply_text({
            'ru': "–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π.",
            'en': "Language set to English.",
            'tr': "Dil T√ºrk√ße olarak ayarlandƒ±."
        }[lang], reply_markup=get_bonus_keyboard(lang))
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ –ø–∞—Ä–æ–ª—é
    if not user_authenticated.get(user_id):
        if text == PASSWORD:
            user_authenticated[user_id] = True
            user_active_status[user_id] = True
            user_spam_status[user_id] = True
            user_count_calc[user_id] = 0
            await update.message.reply_text({
                'ru': "–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω! –í—ã–±–µ—Ä–∏ –±–æ–Ω—É—Å –∏ –≤–≤–µ–¥–∏ —Å—É–º–º—É:",
                'en': "Access granted! Choose a bonus and enter the amount:",
                'tr': "Eri≈üim saƒülandƒ±! Bir bonus se√ßin ve tutarƒ± girin:"
            }[lang], reply_markup=get_bonus_keyboard(lang))
        else:
            await update.message.reply_text({
                'ru': "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
                'en': "Wrong password. Please try again.",
                'tr': "Yanlƒ±≈ü ≈üifre. L√ºtfen tekrar deneyin."
            }[lang])
        return

    if not user_active_status.get(user_id, True):
        return

    # –ö–æ–º–∞–Ω–¥—ã —Å—Ç–æ–ø
    if text.lower() == "stop":
        user_active_status[user_id] = False
        await update.message.reply_text({
            'ru': "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞, –Ω–∞–ø–∏—à–∏ /start.",
            'en': "Bot stopped. To start again, type /start.",
            'tr': "Bot durduruldu. Yeniden ba≈ülatmak i√ßin /start yazƒ±n."
        }[lang])
        return

    if text.lower() == "stopspam":
        user_spam_status[user_id] = False
        await update.message.reply_text({
            'ru': "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –±–æ–ª—å—à–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç, –∫—Ä–æ–º–µ –∫–∞–∂–¥—ã—Ö 10 –ø–æ–¥—Å—á—ë—Ç–æ–≤.",
            'en': "Warnings will no longer appear except every 10 calculations.",
            'tr': "Uyarƒ±lar artƒ±k g√∂sterilmeyecek, sadece her 10 hesaplamada bir."
        }[lang])
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä –±–æ–Ω—É—Å–∞ –ø–æ —è–∑—ã–∫—É
    bonuses_lower = [b.lower() for b in BONUSES[lang]]
    text_lower = text.lower()

    if text_lower in bonuses_lower:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –±–æ–Ω—É—Å–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å)
        index = bonuses_lower.index(text_lower)
        user_choice_data[user_id] = BONUSES[lang][index].lower()
        await update.message.reply_text({
            'ru': f"–í—ã–±—Ä–∞–Ω: {BONUSES[lang][index]}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—É–º–º—É.",
            'en': f"Selected: {BONUSES[lang][index]}. Now enter the amount.",
            'tr': f"Se√ßildi: {BONUSES[lang][index]}. ≈ûimdi tutarƒ± girin."
        }[lang])
        return

    # –ï—Å–ª–∏ –±–æ–Ω—É—Å —É–∂–µ –≤—ã–±—Ä–∞–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ —Å—É–º–º—ã
    if user_id in user_choice_data:
        choice = user_choice_data[user_id]

        try:
            sums = [float(s.replace(',', '.')) for s in text.split()]
        except ValueError:
            await update.message.reply_text({
                'ru': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ —á–∏—Å–ª–∞.",
                'en': "Please enter a valid number or numbers.",
                'tr': "L√ºtfen ge√ßerli bir sayƒ± veya sayƒ±lar girin."
            }[lang])
            return

        is_plural = len(sums) > 1
        results = []

        for num in sums:
            if choice == BONUSES['ru'][0].lower() or choice == BONUSES['en'][0].lower() or choice == BONUSES['tr'][0].lower():
                sums2 = num * 0.20
                sums3 = sums2 * 20
            elif choice == BONUSES['ru'][1].lower() or choice == BONUSES['en'][1].lower() or choice == BONUSES['tr'][1].lower():
                sums2 = num * 0.10
                sums3 = sums2 * 15
            else:
                continue

            slots = sums3 + num
            roulette = sums3 * 3.33 + num
            blackjack = sums3 * 5 + num
            crash = sums3 * 10 + num

            results.append(
                f"{{
                    'ru': '–°—É–º–º–∞',
                    'en': 'Amount',
                    'tr': 'Tutar'
                }[lang]}: {format_number(num)} som\n"
                f"üîπ Slots (100%) ‚Äî {format_number(slots)} som\n"
                f"üîπ Roulette (30%) ‚Äî {format_number(roulette)} som\n"
                f"üîπ Blackjack (20%) ‚Äî {format_number(blackjack)} som\n"
                f"üîπ {{
                    'ru': '–û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ, crash –∏–≥—Ä—ã –∏ –ª–∞–π–≤-–∫–∞–∑–∏–Ω–æ –∏–≥—Ä—ã (10%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å',
                    'en': 'Other games (10%) ‚Äî',
                    'tr': 'Diƒüer oyunlar (10%) ‚Äî'
                }[lang]} {format_number(crash)} som"
            )

        intro = (
            {
                'ru': "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –æ—Ç—ã–≥—Ä—ã—à–∞ —Å –≤–∞—à–∏–º–∏ —Å—É–º–º–∞–º–∏ –±–æ–Ω—É—Å–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—ä—ë–º—ã —Å—Ç–∞–≤–æ–∫ –≤ —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä–∞—Ö:\n",
                'en': "To meet the wagering conditions, you need to:\n",
                'tr': "√áevrim ≈üartlarƒ±nƒ± kar≈üƒ±lamak i√ßin ihtiyacƒ±nƒ±z olan bahis miktarlarƒ±:\n"
            }[lang] if is_plural else
            {
                'ru': "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –æ—Ç—ã–≥—Ä—ã—à–∞ —Å –≤–∞—à–µ–π —Å—É–º–º–æ–π –±–æ–Ω—É—Å–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—ä—ë–º—ã —Å—Ç–∞–≤–æ–∫ –≤ —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä–∞—Ö:\n",
                'en': "To meet the wagering conditions, you need to:\n",
                'tr': "√áevrim ≈üartlarƒ±nƒ± kar≈üƒ±lamak i√ßin ihtiyacƒ±nƒ±z olan bahis miktarlarƒ±:\n"
            }[lang]
        )

        result_text = intro + "\n\n".join(results)
        await update.message.reply_text(result_text)

        user_count_calc[user_id] = user_count_calc.get(user_id, 0) + 1
        count = user_count_calc[user_id]

        if user_spam_status.get(user_id, True):
            await update.message.reply_text({
                'ru': "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã! –≠—Ç–æ –¥–ª—è –≤–∞—à–µ–π –∂–µ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –ø–æ—è–≤–ª—è–ª–æ—Å—å, –Ω–∞–ø–∏—à–∏—Ç–µ stopspam.",
                'en': "Please double-check the final amounts! This is for your own safety. If you want to stop this message, type stopspam.",
                'tr': "L√ºtfen son tutarlarƒ± kontrol edin! Bu sizin g√ºvenliƒüiniz i√ßin. Bu mesajƒ± g√∂rmek istemiyorsanƒ±z, stopspam yazƒ±n."
            }[lang])
        else:
            if count % 10 == 0:
                await update.message.reply_text({
                    'ru': "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã! –≠—Ç–æ –¥–ª—è –≤–∞—à–µ–π –∂–µ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏.",
                    'en': "Please double-check the final amounts! This is for your own safety.",
                    'tr': "L√ºtfen son tutarlarƒ± kontrol edin! Bu sizin g√ºvenliƒüiniz i√ßin."
                }[lang])
    else:
        await update.message.reply_text({
            'ru': "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –±–æ–Ω—É—Å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.",
            'en': "Please select a bonus using the buttons below first.",
            'tr': "L√ºtfen √∂nce a≈üaƒüƒ±daki d√ºƒümelerden bir bonus se√ßin."
        }[lang], reply_markup=get_bonus_keyboard(lang))

if __name__ == '__main__':
    app = ApplicationBuilder().token(os.environ.get("BOT_TOKEN")).build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('status', status))
    app.add_handler(CommandHandler('language', language_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()
