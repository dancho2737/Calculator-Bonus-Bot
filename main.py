from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import os
import math

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_choice_data = {}
user_active_status = {}
user_spam_status = {}
user_count_calc = {}
user_authenticated = {}
user_language = {}

PASSWORD = "starzbot"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ —è–∑—ã–∫–∞–º
keyboards = {
    "ru": [['–ö—Ä–∏–ø—Ç–æ/–ë–∞–π –±–æ–Ω—É—Å 20'], ['–î–µ–ø–æ–∑–∏—Ç –±–æ–Ω—É—Å 10']],
    "en": [['Crypto/Bai bonus 20'], ['Deposit bonus 10']],
    "tr": [['Kripto/Bay bonus 20'], ['Yatƒ±rƒ±m bonusu 10']]
}

# –°–ª–æ–≤–∞—Ä—å –±–æ–Ω—É—Å–æ–≤: –∫–ª—é—á -> –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
bonus_keys = {
    "crypto_20": ["–∫—Ä–∏–ø—Ç–æ/–±–∞–π –±–æ–Ω—É—Å 20", "crypto/bai bonus 20", "kripto/bay bonus 20"],
    "deposit_10": ["–¥–µ–ø–æ–∑–∏—Ç –±–æ–Ω—É—Å 10", "deposit bonus 10", "yatƒ±rƒ±m bonusu 10"]
}

# –°–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö
messages = {
    "ru": {
        "ask_password": "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:",
        "access_granted": "–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω! –í—ã–±–µ—Ä–∏ –±–æ–Ω—É—Å –∏ –≤–≤–µ–¥–∏ —Å—É–º–º—É:",
        "wrong_password": "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
        "bot_activated": "–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í—ã–±–µ—Ä–∏ –±–æ–Ω—É—Å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∏ –≤–≤–µ–¥–∏ —Å—É–º–º—É:",
        "choose_bonus": "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –±–æ–Ω—É—Å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.",
        "bot_stopped": "–ë–æ—Ç —Å–µ–π—á–∞—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å.",
        "bot_active": "–ë–æ—Ç —Å–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–µ–Ω.",
        "stop_message": "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞, –Ω–∞–ø–∏—à–∏ /start.",
        "stopspam_message": "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –±–æ–ª—å—à–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç, –∫—Ä–æ–º–µ –∫–∞–∂–¥—ã—Ö 10 –ø–æ–¥—Å—á—ë—Ç–æ–≤.",
        "invalid_number": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ —á–∏—Å–ª–∞.",
        "check_sums": ("–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã! –≠—Ç–æ –¥–ª—è –≤–∞—à–µ–π –∂–µ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏. "
                       "–ï—Å–ª–∏ –∂–µ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–±—ã —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –ø–æ—è–≤–ª—è–ª–æ—Å—å, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ stopspam"),
        "check_sums_10": "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã! –≠—Ç–æ –¥–ª—è –≤–∞—à–µ–π –∂–µ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏.",
        "wager_intro_plural": "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –æ—Ç—ã–≥—Ä—ã—à–∞ —Å –≤–∞—à–∏–º–∏ —Å—É–º–º–∞–º–∏ –±–æ–Ω—É—Å–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—ä—ë–º—ã —Å—Ç–∞–≤–æ–∫ –≤ —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä–∞—Ö:\n",
        "wager_intro_singular": "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –æ—Ç—ã–≥—Ä—ã—à–∞ —Å –≤–∞—à–µ–π —Å—É–º–º–æ–π –±–æ–Ω—É—Å–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—ä—ë–º—ã —Å—Ç–∞–≤–æ–∫ –≤ —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä–∞—Ö:\n",
        "amount": "–°—É–º–º–∞: {amount}",
        "slots": "üîπ –°–ª–æ—Ç—ã (100%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {value} —Å–æ–º",
        "roulette": "üîπ Roulette (30%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {value} —Å–æ–º",
        "blackjack": "üîπ Blackjack (20%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {value} —Å–æ–º",
        "other_games": "üîπ –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ, crash –∏–≥—Ä—ã –∏ –ª–∞–π–≤-–∫–∞–∑–∏–Ω–æ –∏–≥—Ä—ã (10%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {value} —Å–æ–º",
        "language_prompt": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language / Dil se√ßin:",
        "language_changed": "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π.",
    },
    "en": {
        "ask_password": "Enter the password to access the bot:",
        "access_granted": "Access granted! Choose a bonus and enter the amount:",
        "wrong_password": "Wrong password. Please try again.",
        "bot_activated": "Bot activated. Choose a bonus and enter the amount:",
        "choose_bonus": "Please choose a bonus using the buttons below first.",
        "bot_stopped": "Bot is stopped now. Send /start to activate.",
        "bot_active": "Bot is active now.",
        "stop_message": "Bot stopped. To start again, send /start.",
        "stopspam_message": "Warnings will no longer appear except every 10 calculations.",
        "invalid_number": "Please enter a valid number or numbers.",
        "check_sums": ("Be sure to double-check the final amounts! This is for your own protection. "
                       "If you want this message to stop appearing, type stopspam"),
        "check_sums_10": "Be sure to double-check the final amounts! This is for your own protection.",
        "wager_intro_plural": "To meet the wagering conditions, you need to:",
        "wager_intro_singular": "To meet the wagering conditions, you need to:",
        "amount": "Amount: {amount} som",
        "slots": "üîπ Slots (100%) ‚Äî {value} som",
        "roulette": "üîπ Roulette (30%) ‚Äî {value} som",
        "blackjack": "üîπ Blackjack (20%) ‚Äî {value} som",
        "other_games": "üîπ Other games (10%) ‚Äî {value} som",
        "language_prompt": "Please choose your language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Dil se√ßin:",
        "language_changed": "Language changed to English.",
    },
    "tr": {
        "ask_password": "Bota eri≈ümek i√ßin ≈üifreyi girin:",
        "access_granted": "Eri≈üim verildi! Bir bonus se√ßin ve tutarƒ± girin:",
        "wrong_password": "Yanlƒ±≈ü ≈üifre. L√ºtfen tekrar deneyin.",
        "bot_activated": "Bot etkinle≈ütirildi. Bir bonus se√ßin ve tutarƒ± girin:",
        "choose_bonus": "L√ºtfen √∂nce a≈üaƒüƒ±daki butonlardan bir bonus se√ßin.",
        "bot_stopped": "Bot ≈üu anda durduruldu. Ba≈ülatmak i√ßin /start yazƒ±n.",
        "bot_active": "Bot ≈üu anda aktif.",
        "stop_message": "Bot durduruldu. Tekrar ba≈ülatmak i√ßin /start yazƒ±n.",
        "stopspam_message": "Uyarƒ±lar artƒ±k yalnƒ±zca her 10 hesaplamada bir g√∂sterilecek.",
        "invalid_number": "L√ºtfen ge√ßerli bir sayƒ± veya sayƒ±lar girin.",
        "check_sums": ("Nihai tutarlarƒ± mutlaka tekrar kontrol edin! Bu sizin g√ºvenliƒüiniz i√ßin. "
                       "Bu mesajƒ±n g√∂r√ºnmemesini istiyorsanƒ±z, stopspam yazƒ±n"),
        "check_sums_10": "Nihai tutarlarƒ± mutlaka tekrar kontrol edin! Bu sizin g√ºvenliƒüiniz i√ßin.",
        "wager_intro_plural": "Kazan√ß ≈üartlarƒ±nƒ± yerine getirmek i√ßin ≈üunlarƒ± yapmanƒ±z gerekecek:",
        "wager_intro_singular": "Kazan√ß ≈üartlarƒ±nƒ± yerine getirmek i√ßin ≈üunlarƒ± yapmanƒ±z gerekecek:",
        "amount": "Tutar: {amount} som",
        "slots": "üîπ Slotlar (100%) ‚Äî {value} som",
        "roulette": "üîπ Rulet (30%) ‚Äî {value} som",
        "blackjack": "üîπ Blackjack (20%) ‚Äî {value} som",
        "other_games": "üîπ Diƒüer oyunlar (10%) ‚Äî {value} som",
        "language_prompt": "L√ºtfen dilinizi se√ßin / Please choose your language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "language_changed": "Dil T√ºrk√ße olarak deƒüi≈ütirildi.",
    }
}

def format_number(n):
    n_ceil = math.ceil(n)
    return f"{n_ceil:,}".replace(",", " ")

async def ask_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_language[user_id] = None  # –°–±—Ä–æ—Å —è–∑—ã–∫–∞
    keyboard = ReplyKeyboardMarkup([['–†—É—Å—Å–∫–∏–π', 'English', 'T√ºrk√ße']], resize_keyboard=True)
    await update.message.reply_text(messages["ru"]["language_prompt"], reply_markup=keyboard)

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.lower()

    if text == '—Ä—É—Å—Å–∫–∏–π':
        user_language[user_id] = "ru"
        await update.message.reply_text(messages["ru"]["language_changed"])
    elif text == 'english':
        user_language[user_id] = "en"
        await update.message.reply_text(messages["en"]["language_changed"])
    elif text == 't√ºrk√ße' or text == 'turkce':
        user_language[user_id] = "tr"
        await update.message.reply_text(messages["tr"]["language_changed"])
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø–æ–ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å
    await update.message.reply_text(messages[user_language[user_id]]["ask_password"], reply_markup=ReplyKeyboardMarkup([], resize_keyboard=True))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = user_language.get(user_id)

    if lang is None:
        # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–æ–ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å
        await ask_language(update, context)
        return

    if not user_authenticated.get(user_id):
        await update.message.reply_text(messages[lang]["ask_password"])
        return

    user_active_status[user_id] = True
    user_spam_status[user_id] = True
    user_count_calc[user_id] = 0

    await update.message.reply_text(
        messages[lang]["bot_activated"],
        reply_markup=ReplyKeyboardMarkup(keyboards[lang], resize_keyboard=True)
    )

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = user_language.get(user_id, "ru")
    if not user_authenticated.get(user_id):
        await update.message.reply_text(messages[lang]["ask_password"])
        return

    is_active = user_active_status.get(user_id, True)
    await update.message.reply_text(messages[lang]["bot_active"] if is_active else messages[lang]["bot_stopped"])

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    lang = user_language.get(user_id, "ru")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ (–µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω)
    if lang is None:
        await set_language(update, context)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    if not user_authenticated.get(user_id):
        if text == PASSWORD:
            user_authenticated[user_id] = True
            user_active_status[user_id] = True
            user_spam_status[user_id] = True
            user_count_calc[user_id] = 0
            await update.message.reply_text(messages[lang]["access_granted"], reply_markup=ReplyKeyboardMarkup(keyboards[lang], resize_keyboard=True))
        else:
            await update.message.reply_text(messages[lang]["wrong_password"])
        return

    if not user_active_status.get(user_id, True):
        return

    # –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã (stop, stopspam)
    if text.lower() == "stop":
        user_active_status[user_id] = False
        await update.message.reply_text(messages[lang]["stop_message"])
        return

    if text.lower() == "stopspam":
        user_spam_status[user_id] = False
        await update.message.reply_text(messages[lang]["stopspam_message"])
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ –±–æ–Ω—É—Å–∞
    choice_key = None
    for key, variants in bonus_keys.items():
        if text.lower() in [v.lower() for v in variants]:
            choice_key = key
            break

    if choice_key:
        user_choice_data[user_id] = choice_key
        await update.message.reply_text(f"{text}. {messages[lang]['amount'].format(amount='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—É–º–º—É.')}")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã
    if user_id in user_choice_data:
        choice = user_choice_data[user_id]
        try:
            sums = [float(s.replace(',', '.')) for s in text.split()]
        except ValueError:
            await update.message.reply_text(messages[lang]["invalid_number"])
            return

        is_plural = len(sums) > 1
        results = []

        for num in sums:
            if choice == 'deposit_10':
                sums2 = num * 0.10
                sums3 = sums2 * 15
            elif choice == 'crypto_20':
                sums2 = num * 0.20
                sums3 = sums2 * 20
            else:
                continue

            slots = sums3 + num
            roulette = sums3 * 3.33 + num
            blackjack = sums3 * 5 + num
            crash = sums3 * 10 + num

            results.append(
                f"{messages[lang]['amount'].format(amount=format_number(num))}\n"
                f"{messages[lang]['slots'].format(value=format_number(slots))}\n"
                f"{messages[lang]['roulette'].format(value=format_number(roulette))}\n"
                f"{messages[lang]['blackjack'].format(value=format_number(blackjack))}\n"
                f"{messages[lang]['other_games'].format(value=format_number(crash))}"
            )

        intro = messages[lang]["wager_intro_plural"] if is_plural else messages[lang]["wager_intro_singular"]
        result_text = intro + "\n\n".join(results)
        await update.message.reply_text(result_text)

        user_count_calc[user_id] = user_count_calc.get(user_id, 0) + 1
        count = user_count_calc[user_id]

        if user_spam_status.get(user_id, True):
            await update.message.reply_text(messages[lang]["check_sums"])
        else:
            if count % 10 == 0:
                await update.message.reply_text(messages[lang]["check_sums_10"])

    else:
        await update.message.reply_text(messages[lang]["choose_bonus"], reply_markup=ReplyKeyboardMarkup(keyboards[lang], resize_keyboard=True))


if __name__ == '__main__':
    app = ApplicationBuilder().token(os.environ.get("BOT_TOKEN")).build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('status', status))
    app.add_handler(CommandHandler('language', ask_language))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()
