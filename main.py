from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import os
import math

user_choice_data = {}
user_active_status = {}
user_spam_status = {}
user_count_calc = {}
user_authenticated = {}
user_language = {}

PASSWORD = "starzbot"

lang_keyboard = [['–†—É—Å—Å–∫–∏–π', 'English', 'T√ºrk√ße']]
lang_markup = ReplyKeyboardMarkup(lang_keyboard, resize_keyboard=True)

reply_keyboards = {
    'ru': [['–ö—Ä–∏–ø—Ç–æ/–ë–∞–π –±–æ–Ω—É—Å 20'], ['–î–µ–ø–æ–∑–∏—Ç –±–æ–Ω—É—Å 10']],
    'en': [['Crypto/Bai Bonus 20'], ['Deposit Bonus 10']],
    'tr': [['Kripto/Bai Bonusu 20'], ['Depozito Bonusu 10']]
}

def format_number(n):
    n_ceil = math.ceil(n)
    return f"{n_ceil:,}".replace(",", " ")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if not user_authenticated.get(user_id):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:")
        return

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select a language / Dil se√ßin:", reply_markup=lang_markup)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not user_authenticated.get(user_id):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å. –ù–∞–ø–∏—à–∏ /start.")
        return

    is_active = user_active_status.get(user_id, True)
    await update.message.reply_text("–ë–æ—Ç —Å–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–µ–Ω." if is_active else "–ë–æ—Ç —Å–µ–π—á–∞—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if not user_authenticated.get(user_id):
        if text == PASSWORD:
            user_authenticated[user_id] = True
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select a language / Dil se√ßin:", reply_markup=lang_markup)
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        return

    if text.lower() in ['—Ä—É—Å—Å–∫–∏–π', 'russian']:
        lang = 'ru'
    elif text.lower() in ['english', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π']:
        lang = 'en'
    elif text.lower() in ['turkish', 't√ºrk√ße', '—Ç—É—Ä–µ—Ü–∫–∏–π']:
        lang = 'tr'
    else:
        lang = user_language.get(user_id, 'ru')

    user_language[user_id] = lang

    reply_markup = ReplyKeyboardMarkup(reply_keyboards[lang], resize_keyboard=True)

    if text.lower() in ['—Ä—É—Å—Å–∫–∏–π', 'english', 'turkish', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π', '—Ç—É—Ä–µ—Ü–∫–∏–π', 'russian', 't√ºrk√ße']:
        if lang == 'ru':
            msg = "–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í—ã–±–µ—Ä–∏ –±–æ–Ω—É—Å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∏ –≤–≤–µ–¥–∏ —Å—É–º–º—É:"
        elif lang == 'en':
            msg = "Bot activated. Choose a bonus and enter the amount:"
        elif lang == 'tr':
            msg = "Bot etkinle≈ütirildi. Bir bonus se√ßin ve miktarƒ± girin:"
        await update.message.reply_text(msg, reply_markup=reply_markup)
        return

    if not user_active_status.get(user_id, True):
        return

    if text.lower() == "stop":
        user_active_status[user_id] = False
        await update.message.reply_text("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞, –Ω–∞–ø–∏—à–∏ /start.")
        return

    if text.lower() == "stopspam":
        user_spam_status[user_id] = False
        await update.message.reply_text("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –±–æ–ª—å—à–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç, –∫—Ä–æ–º–µ –∫–∞–∂–¥—ã—Ö 10 –ø–æ–¥—Å—á—ë—Ç–æ–≤.")
        return

    choice_map = {
        'ru': ['–∫—Ä–∏–ø—Ç–æ/–±–∞–π –±–æ–Ω—É—Å 20', '–¥–µ–ø–æ–∑–∏—Ç –±–æ–Ω—É—Å 10'],
        'en': ['crypto/bai bonus 20', 'deposit bonus 10'],
        'tr': ['kripto/bai bonusu 20', 'depozito bonusu 10']
    }

    for key in choice_map.get(lang, []):
        if text.lower() == key:
            user_choice_data[user_id] = key
            await update.message.reply_text(f"–í—ã–±—Ä–∞–Ω: {text}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—É–º–º—É.")
            return

    if user_id in user_choice_data:
        choice = user_choice_data[user_id]
        try:
            sums = [float(s.replace(',', '.')) for s in text.split()]
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ —á–∏—Å–ª–∞.")
            return

        is_plural = len(sums) > 1
        results = []

        for num in sums:
            if '–¥–µ–ø–æ–∑–∏—Ç' in choice or 'deposit' in choice or 'depozito' in choice:
                sums2 = num * 0.10
                sums3 = sums2 * 15
            elif '–∫—Ä–∏–ø—Ç–æ' in choice or 'crypto' in choice or 'kripto' in choice:
                sums2 = num * 0.20
                sums3 = sums2 * 20
            else:
                continue

            slots = sums3 + num
            roulette = sums3 * 3.33 + num
            blackjack = sums3 * 5 + num
            crash = sums3 * 10 + num

            results.append((num, slots, roulette, blackjack, crash))

        if lang == 'ru':
            intro = (
                "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –æ—Ç—ã–≥—Ä—ã—à–∞ —Å –≤–∞—à–∏–º–∏ —Å—É–º–º–∞–º–∏ –±–æ–Ω—É—Å–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—ä—ë–º—ã —Å—Ç–∞–≤–æ–∫ –≤ —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä–∞—Ö:\n"
                if is_plural else
                "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –æ—Ç—ã–≥—Ä—ã—à–∞ —Å –≤–∞—à–µ–π —Å—É–º–º–æ–π –±–æ–Ω—É—Å–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—ä—ë–º—ã —Å—Ç–∞–≤–æ–∫ –≤ —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä–∞—Ö:\n"
            )
            currency = "—Å–æ–º–æ–≤"
            lines = [
                f"–°—É–º–º–∞: {format_number(num)} {currency}\n"
                f"üîπ –°–ª–æ—Ç—ã (100%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {format_number(slots)} {currency}\n"
                f"üîπ Roulette (30%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {format_number(roulette)} {currency}\n"
                f"üîπ Blackjack (20%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {format_number(blackjack)} {currency}\n"
                f"üîπ –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ, crash –∏–≥—Ä—ã –∏ –ª–∞–π–≤-–∫–∞–∑–∏–Ω–æ –∏–≥—Ä—ã (10%) ‚Äî –æ—Ç—ã–≥—Ä–∞—Ç—å {format_number(crash)} {currency}"
                for num, slots, roulette, blackjack, crash in results
            ]
        elif lang == 'en':
            intro = (
                "To meet the wagering conditions with your bonus amounts, you need to place the following bets in different games:\n"
                if is_plural else
                "To meet the wagering conditions with your bonus amount, you need to place the following bets in different games:\n"
            )
            currency = "som(s)"
            lines = [
                f"Amount: {format_number(num)} {currency}\n"
                f"üîπ Slots (100%) ‚Äî wager {format_number(slots)} {currency}\n"
                f"üîπ Roulette (30%) ‚Äî wager {format_number(roulette)} {currency}\n"
                f"üîπ Blackjack (20%) ‚Äî wager {format_number(blackjack)} {currency}\n"
                f"üîπ Other table, crash and live-casino games (10%) ‚Äî wager {format_number(crash)} {currency}"
                for num, slots, roulette, blackjack, crash in results
            ]
        elif lang == 'tr':
            intro = (
                "Bonus miktarlarƒ±nƒ±zla √ßevrim ≈üartlarƒ±nƒ± kar≈üƒ±lamak i√ßin a≈üaƒüƒ±daki oyun t√ºrlerinde ≈üu miktarlarda bahis yapmanƒ±z gerekir:\n"
                if is_plural else
                "Bonus miktarƒ±nƒ±zla √ßevrim ≈üartlarƒ±nƒ± kar≈üƒ±lamak i√ßin a≈üaƒüƒ±daki oyun t√ºrlerinde ≈üu miktarda bahis yapmanƒ±z gerekir:\n"
            )
            currency = "som"
            lines = [
                f"Tutar: {format_number(num)} {currency}\n"
                f"üîπ Slotlar (100%) ‚Äî {format_number(slots)} {currency} bahis\n"
                f"üîπ Rulet (30%) ‚Äî {format_number(roulette)} {currency} bahis\n"
                f"üîπ Blackjack (20%) ‚Äî {format_number(blackjack)} {currency} bahis\n"
                f"üîπ Diƒüer masa, crash ve canlƒ± casino oyunlarƒ± (10%) ‚Äî {format_number(crash)} {currency} bahis"
                for num, slots, roulette, blackjack, crash in results
            ]

        result_text = intro + "\n\n".join(lines)
        await update.message.reply_text(result_text)

        user_count_calc[user_id] = user_count_calc.get(user_id, 0) + 1
        count = user_count_calc[user_id]

        if user_spam_status.get(user_id, True):
            await update.message.reply_text(
                "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã! –≠—Ç–æ –¥–ª—è –≤–∞—à–µ–π –∂–µ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏. "
                "–ï—Å–ª–∏ –∂–µ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–±—ã —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –ø–æ—è–≤–ª—è–ª–æ—Å—å, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ stopspam"
            )
        else:
            if count % 10 == 0:
                await update.message.reply_text(
                    "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã! –≠—Ç–æ –¥–ª—è –≤–∞—à–µ–π –∂–µ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏."
                )
    else:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –±–æ–Ω—É—Å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.", reply_markup=ReplyKeyboardMarkup(reply_keyboards[lang], resize_keyboard=True))

if __name__ == '__main__':
    app = ApplicationBuilder().token(os.environ.get("BOT_TOKEN")).build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('status', status))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()
